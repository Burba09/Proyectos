

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Tue Jun 21 13:39:09 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    36                           	dabs	1,0x7E,2
    37  0000                     
    38                           ; Version 2.20
    39                           ; Generated 12/02/2020 GMT
    40                           ; 
    41                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC16F887 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72  0000                     	;# 
    73  0001                     	;# 
    74  0002                     	;# 
    75  0003                     	;# 
    76  0004                     	;# 
    77  0005                     	;# 
    78  0006                     	;# 
    79  0007                     	;# 
    80  0008                     	;# 
    81  0009                     	;# 
    82  000A                     	;# 
    83  000B                     	;# 
    84  000C                     	;# 
    85  000D                     	;# 
    86  000E                     	;# 
    87  000E                     	;# 
    88  000F                     	;# 
    89  0010                     	;# 
    90  0011                     	;# 
    91  0012                     	;# 
    92  0013                     	;# 
    93  0014                     	;# 
    94  0015                     	;# 
    95  0015                     	;# 
    96  0016                     	;# 
    97  0017                     	;# 
    98  0018                     	;# 
    99  0019                     	;# 
   100  001A                     	;# 
   101  001B                     	;# 
   102  001B                     	;# 
   103  001C                     	;# 
   104  001D                     	;# 
   105  001E                     	;# 
   106  001F                     	;# 
   107  0081                     	;# 
   108  0085                     	;# 
   109  0086                     	;# 
   110  0087                     	;# 
   111  0088                     	;# 
   112  0089                     	;# 
   113  008C                     	;# 
   114  008D                     	;# 
   115  008E                     	;# 
   116  008F                     	;# 
   117  0090                     	;# 
   118  0091                     	;# 
   119  0092                     	;# 
   120  0093                     	;# 
   121  0093                     	;# 
   122  0093                     	;# 
   123  0094                     	;# 
   124  0095                     	;# 
   125  0096                     	;# 
   126  0097                     	;# 
   127  0098                     	;# 
   128  0099                     	;# 
   129  009A                     	;# 
   130  009B                     	;# 
   131  009C                     	;# 
   132  009D                     	;# 
   133  009E                     	;# 
   134  009F                     	;# 
   135  0105                     	;# 
   136  0107                     	;# 
   137  0108                     	;# 
   138  0109                     	;# 
   139  010C                     	;# 
   140  010C                     	;# 
   141  010D                     	;# 
   142  010E                     	;# 
   143  010F                     	;# 
   144  0185                     	;# 
   145  0187                     	;# 
   146  0188                     	;# 
   147  0189                     	;# 
   148  018C                     	;# 
   149  018D                     	;# 
   150  0000                     	;# 
   151  0001                     	;# 
   152  0002                     	;# 
   153  0003                     	;# 
   154  0004                     	;# 
   155  0005                     	;# 
   156  0006                     	;# 
   157  0007                     	;# 
   158  0008                     	;# 
   159  0009                     	;# 
   160  000A                     	;# 
   161  000B                     	;# 
   162  000C                     	;# 
   163  000D                     	;# 
   164  000E                     	;# 
   165  000E                     	;# 
   166  000F                     	;# 
   167  0010                     	;# 
   168  0011                     	;# 
   169  0012                     	;# 
   170  0013                     	;# 
   171  0014                     	;# 
   172  0015                     	;# 
   173  0015                     	;# 
   174  0016                     	;# 
   175  0017                     	;# 
   176  0018                     	;# 
   177  0019                     	;# 
   178  001A                     	;# 
   179  001B                     	;# 
   180  001B                     	;# 
   181  001C                     	;# 
   182  001D                     	;# 
   183  001E                     	;# 
   184  001F                     	;# 
   185  0081                     	;# 
   186  0085                     	;# 
   187  0086                     	;# 
   188  0087                     	;# 
   189  0088                     	;# 
   190  0089                     	;# 
   191  008C                     	;# 
   192  008D                     	;# 
   193  008E                     	;# 
   194  008F                     	;# 
   195  0090                     	;# 
   196  0091                     	;# 
   197  0092                     	;# 
   198  0093                     	;# 
   199  0093                     	;# 
   200  0093                     	;# 
   201  0094                     	;# 
   202  0095                     	;# 
   203  0096                     	;# 
   204  0097                     	;# 
   205  0098                     	;# 
   206  0099                     	;# 
   207  009A                     	;# 
   208  009B                     	;# 
   209  009C                     	;# 
   210  009D                     	;# 
   211  009E                     	;# 
   212  009F                     	;# 
   213  0105                     	;# 
   214  0107                     	;# 
   215  0108                     	;# 
   216  0109                     	;# 
   217  010C                     	;# 
   218  010C                     	;# 
   219  010D                     	;# 
   220  010E                     	;# 
   221  010F                     	;# 
   222  0185                     	;# 
   223  0187                     	;# 
   224  0188                     	;# 
   225  0189                     	;# 
   226  018C                     	;# 
   227  018D                     	;# 
   228  0000                     	;# 
   229  0001                     	;# 
   230  0002                     	;# 
   231  0003                     	;# 
   232  0004                     	;# 
   233  0005                     	;# 
   234  0006                     	;# 
   235  0007                     	;# 
   236  0008                     	;# 
   237  0009                     	;# 
   238  000A                     	;# 
   239  000B                     	;# 
   240  000C                     	;# 
   241  000D                     	;# 
   242  000E                     	;# 
   243  000E                     	;# 
   244  000F                     	;# 
   245  0010                     	;# 
   246  0011                     	;# 
   247  0012                     	;# 
   248  0013                     	;# 
   249  0014                     	;# 
   250  0015                     	;# 
   251  0015                     	;# 
   252  0016                     	;# 
   253  0017                     	;# 
   254  0018                     	;# 
   255  0019                     	;# 
   256  001A                     	;# 
   257  001B                     	;# 
   258  001B                     	;# 
   259  001C                     	;# 
   260  001D                     	;# 
   261  001E                     	;# 
   262  001F                     	;# 
   263  0081                     	;# 
   264  0085                     	;# 
   265  0086                     	;# 
   266  0087                     	;# 
   267  0088                     	;# 
   268  0089                     	;# 
   269  008C                     	;# 
   270  008D                     	;# 
   271  008E                     	;# 
   272  008F                     	;# 
   273  0090                     	;# 
   274  0091                     	;# 
   275  0092                     	;# 
   276  0093                     	;# 
   277  0093                     	;# 
   278  0093                     	;# 
   279  0094                     	;# 
   280  0095                     	;# 
   281  0096                     	;# 
   282  0097                     	;# 
   283  0098                     	;# 
   284  0099                     	;# 
   285  009A                     	;# 
   286  009B                     	;# 
   287  009C                     	;# 
   288  009D                     	;# 
   289  009E                     	;# 
   290  009F                     	;# 
   291  0105                     	;# 
   292  0107                     	;# 
   293  0108                     	;# 
   294  0109                     	;# 
   295  010C                     	;# 
   296  010C                     	;# 
   297  010D                     	;# 
   298  010E                     	;# 
   299  010F                     	;# 
   300  0185                     	;# 
   301  0187                     	;# 
   302  0188                     	;# 
   303  0189                     	;# 
   304  018C                     	;# 
   305  018D                     	;# 
   306  0000                     	;# 
   307  0001                     	;# 
   308  0002                     	;# 
   309  0003                     	;# 
   310  0004                     	;# 
   311  0005                     	;# 
   312  0006                     	;# 
   313  0007                     	;# 
   314  0008                     	;# 
   315  0009                     	;# 
   316  000A                     	;# 
   317  000B                     	;# 
   318  000C                     	;# 
   319  000D                     	;# 
   320  000E                     	;# 
   321  000E                     	;# 
   322  000F                     	;# 
   323  0010                     	;# 
   324  0011                     	;# 
   325  0012                     	;# 
   326  0013                     	;# 
   327  0014                     	;# 
   328  0015                     	;# 
   329  0015                     	;# 
   330  0016                     	;# 
   331  0017                     	;# 
   332  0018                     	;# 
   333  0019                     	;# 
   334  001A                     	;# 
   335  001B                     	;# 
   336  001B                     	;# 
   337  001C                     	;# 
   338  001D                     	;# 
   339  001E                     	;# 
   340  001F                     	;# 
   341  0081                     	;# 
   342  0085                     	;# 
   343  0086                     	;# 
   344  0087                     	;# 
   345  0088                     	;# 
   346  0089                     	;# 
   347  008C                     	;# 
   348  008D                     	;# 
   349  008E                     	;# 
   350  008F                     	;# 
   351  0090                     	;# 
   352  0091                     	;# 
   353  0092                     	;# 
   354  0093                     	;# 
   355  0093                     	;# 
   356  0093                     	;# 
   357  0094                     	;# 
   358  0095                     	;# 
   359  0096                     	;# 
   360  0097                     	;# 
   361  0098                     	;# 
   362  0099                     	;# 
   363  009A                     	;# 
   364  009B                     	;# 
   365  009C                     	;# 
   366  009D                     	;# 
   367  009E                     	;# 
   368  009F                     	;# 
   369  0105                     	;# 
   370  0107                     	;# 
   371  0108                     	;# 
   372  0109                     	;# 
   373  010C                     	;# 
   374  010C                     	;# 
   375  010D                     	;# 
   376  010E                     	;# 
   377  010F                     	;# 
   378  0185                     	;# 
   379  0187                     	;# 
   380  0188                     	;# 
   381  0189                     	;# 
   382  018C                     	;# 
   383  018D                     	;# 
   384                           
   385                           	psect	idataBANK0
   386  0092                     __pidataBANK0:
   387                           
   388                           ;initializer for _password
   389  0092  34D2               	retlw	210
   390  0093  3404               	retlw	4
   391                           
   392                           	psect	strings
   393  0003                     __pstrings:
   394  0003                     stringtab:
   395  0003                     __stringtab:
   396                           
   397                           ;	String table - string pointers are 1 byte each
   398  0003  1BFF               	btfsc	btemp+1,7
   399  0004  280D               	ljmp	stringcode
   400  0005  1383               	bcf	3,7
   401  0006  187F               	btfsc	btemp+1,0
   402  0007  1783               	bsf	3,7
   403  0008  0800               	movf	0,w
   404  0009  0A84               	incf	4,f
   405  000A  1903               	skipnz
   406  000B  0AFF               	incf	btemp+1,f
   407  000C  0008               	return
   408  000D                     stringcode:
   409  000D                     stringdir:
   410  000D  3000               	movlw	high stringdir
   411  000E  008A               	movwf	10
   412  000F  0804               	movf	4,w
   413  0010  0A84               	incf	4,f
   414  0011  0782               	addwf	2,f
   415  0012                     __stringbase:
   416  0012  3400               	retlw	0
   417  0013                     __end_of__stringtab:
   418  0013                     _dpowers:
   419  0013  3401               	retlw	1
   420  0014  3400               	retlw	0
   421  0015  340A               	retlw	10
   422  0016  3400               	retlw	0
   423  0017  3464               	retlw	100
   424  0018  3400               	retlw	0
   425  0019  34E8               	retlw	232
   426  001A  3403               	retlw	3
   427  001B  3410               	retlw	16
   428  001C  3427               	retlw	39
   429  001D                     __end_of_dpowers:
   430  0006                     _PORTB	set	6
   431  0007                     _PORTC	set	7
   432  0008                     _PORTD	set	8
   433  0036                     _RB6	set	54
   434  0035                     _RB5	set	53
   435  0034                     _RB4	set	52
   436  0043                     _RD3	set	67
   437  0042                     _RD2	set	66
   438  0047                     _RD7	set	71
   439  0046                     _RD6	set	70
   440  0045                     _RD5	set	69
   441  0044                     _RD4	set	68
   442  003A                     _RC2	set	58
   443  0039                     _RC1	set	57
   444  0038                     _RC0	set	56
   445  0086                     _TRISB	set	134
   446  0087                     _TRISC	set	135
   447  0088                     _TRISD	set	136
   448  001D                     STR_5:
   449  001D  3443               	retlw	67	;'C'
   450  001E  3465               	retlw	101	;'e'
   451  001F  3472               	retlw	114	;'r'
   452  0020  3472               	retlw	114	;'r'
   453  0021  3461               	retlw	97	;'a'
   454  0022  3464               	retlw	100	;'d'
   455  0023  3475               	retlw	117	;'u'
   456  0024  3472               	retlw	114	;'r'
   457  0025  3461               	retlw	97	;'a'
   458  0026  3420               	retlw	32	;' '
   459  0027  3445               	retlw	69	;'E'
   460  0028  346C               	retlw	108	;'l'
   461  0029  3465               	retlw	101	;'e'
   462  002A  3463               	retlw	99	;'c'
   463  002B  3474               	retlw	116	;'t'
   464  002C  3472               	retlw	114	;'r'
   465  002D  346F               	retlw	111	;'o'
   466  002E  346E               	retlw	110	;'n'
   467  002F  3469               	retlw	105	;'i'
   468  0030  3463               	retlw	99	;'c'
   469  0031  3461               	retlw	97	;'a'
   470  0032  3400               	retlw	0
   471  0033                     STR_17:
   472  0033  3443               	retlw	67	;'C'
   473  0034  346C               	retlw	108	;'l'
   474  0035  3461               	retlw	97	;'a'
   475  0036  3476               	retlw	118	;'v'
   476  0037  3465               	retlw	101	;'e'
   477  0038  3420               	retlw	32	;' '
   478  0039  3449               	retlw	73	;'I'
   479  003A  346E               	retlw	110	;'n'
   480  003B  3463               	retlw	99	;'c'
   481  003C  346F               	retlw	111	;'o'
   482  003D  3472               	retlw	114	;'r'
   483  003E  3472               	retlw	114	;'r'
   484  003F  3465               	retlw	101	;'e'
   485  0040  3463               	retlw	99	;'c'
   486  0041  3474               	retlw	116	;'t'
   487  0042  3461               	retlw	97	;'a'
   488  0043  3400               	retlw	0
   489  0044                     STR_3:
   490  0044  3449               	retlw	73	;'I'
   491  0045  344E               	retlw	78	;'N'
   492  0046  3447               	retlw	71	;'G'
   493  0047  3452               	retlw	82	;'R'
   494  0048  3445               	retlw	69	;'E'
   495  0049  3453               	retlw	83	;'S'
   496  004A  3441               	retlw	65	;'A'
   497  004B  3452               	retlw	82	;'R'
   498  004C  3420               	retlw	32	;' '
   499  004D  3443               	retlw	67	;'C'
   500  004E  344C               	retlw	76	;'L'
   501  004F  3441               	retlw	65	;'A'
   502  0050  3456               	retlw	86	;'V'
   503  0051  3445               	retlw	69	;'E'
   504  0052  343A               	retlw	58	;':'
   505  0053  3400               	retlw	0
   506  0054                     STR_2:
   507  0054  3443               	retlw	67	;'C'
   508  0055  3461               	retlw	97	;'a'
   509  0056  346A               	retlw	106	;'j'
   510  0057  3461               	retlw	97	;'a'
   511  0058  3420               	retlw	32	;' '
   512  0059  3442               	retlw	66	;'B'
   513  005A  346C               	retlw	108	;'l'
   514  005B  346F               	retlw	111	;'o'
   515  005C  3471               	retlw	113	;'q'
   516  005D  3475               	retlw	117	;'u'
   517  005E  3465               	retlw	101	;'e'
   518  005F  3461               	retlw	97	;'a'
   519  0060  3464               	retlw	100	;'d'
   520  0061  3461               	retlw	97	;'a'
   521  0062  3400               	retlw	0
   522  0063                     STR_14:
   523  0063  3443               	retlw	67	;'C'
   524  0064  346C               	retlw	108	;'l'
   525  0065  3461               	retlw	97	;'a'
   526  0066  3476               	retlw	118	;'v'
   527  0067  3465               	retlw	101	;'e'
   528  0068  3420               	retlw	32	;' '
   529  0069  3443               	retlw	67	;'C'
   530  006A  346F               	retlw	111	;'o'
   531  006B  3472               	retlw	114	;'r'
   532  006C  3472               	retlw	114	;'r'
   533  006D  3465               	retlw	101	;'e'
   534  006E  3463               	retlw	99	;'c'
   535  006F  3474               	retlw	116	;'t'
   536  0070  3461               	retlw	97	;'a'
   537  0071  3400               	retlw	0
   538  0072                     STR_15:
   539  0072  3443               	retlw	67	;'C'
   540  0073  3465               	retlw	101	;'e'
   541  0074  3472               	retlw	114	;'r'
   542  0075  3472               	retlw	114	;'r'
   543  0076  3461               	retlw	97	;'a'
   544  0077  3464               	retlw	100	;'d'
   545  0078  3475               	retlw	117	;'u'
   546  0079  3472               	retlw	114	;'r'
   547  007A  3461               	retlw	97	;'a'
   548  007B  3400               	retlw	0
   549  007C                     STR_16:
   550  007C  3441               	retlw	65	;'A'
   551  007D  3462               	retlw	98	;'b'
   552  007E  3469               	retlw	105	;'i'
   553  007F  3465               	retlw	101	;'e'
   554  0080  3472               	retlw	114	;'r'
   555  0081  3474               	retlw	116	;'t'
   556  0082  3461               	retlw	97	;'a'
   557  0083  3400               	retlw	0
   558  0084                     STR_1:
   559  0084  342A               	retlw	42	;'*'
   560  0085  342A               	retlw	42	;'*'
   561  0086  342A               	retlw	42	;'*'
   562  0087  342A               	retlw	42	;'*'
   563  0088  3400               	retlw	0
   564  0089                     STR_4:
   565  0089  345F               	retlw	95	;'_'
   566  008A  345F               	retlw	95	;'_'
   567  008B  345F               	retlw	95	;'_'
   568  008C  345F               	retlw	95	;'_'
   569  008D  3400               	retlw	0
   570  008E                     STR_7:
   571  008E  3425               	retlw	37	;'%'
   572  008F  3469               	retlw	105	;'i'
   573  0090  3400               	retlw	0
   574  0087                     
   575                           	psect	cinit
   576  07E7                     start_initialization:	
   577                           ; #config settings
   578                           
   579  07E7                     __initialization:
   580                           
   581                           ; Initialize objects allocated to BANK0
   582  07E7  120A  118A  2092  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   583  07EC  00DB               	movwf	__pdataBANK0& (0+127)
   584  07ED  120A  118A  2093  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   585  07F2  00DC               	movwf	(__pdataBANK0+1)& (0+127)
   586                           
   587                           ; Clear objects allocated to BANK0
   588  07F3  1383               	bcf	3,7	;select IRP bank0
   589  07F4  3049               	movlw	low __pbssBANK0
   590  07F5  0084               	movwf	4
   591  07F6  305B               	movlw	low (__pbssBANK0+18)
   592  07F7  120A  158A  2764  120A  118A  	fcall	clear_ram0
   593  07FC                     end_of_initialization:	
   594                           ;End of C runtime variable initialization code
   595                           
   596  07FC                     __end_of__initialization:
   597  07FC  0183               	clrf	3
   598  07FD  120A  118A  2CCA   	ljmp	_main	;jump to C main() function
   599                           
   600                           	psect	bssBANK0
   601  0049                     __pbssBANK0:
   602  0049                     _x:
   603  0049                     	ds	2
   604  004B                     _clave:
   605  004B                     	ds	2
   606  004D                     _estado:
   607  004D                     	ds	2
   608  004F                     _x4:
   609  004F                     	ds	2
   610  0051                     _x3:
   611  0051                     	ds	2
   612  0053                     _x2:
   613  0053                     	ds	2
   614  0055                     _verificar:
   615  0055                     	ds	2
   616  0057                     _intentos:
   617  0057                     	ds	2
   618  0059                     _x1:
   619  0059                     	ds	2
   620                           
   621                           	psect	dataBANK0
   622  005B                     __pdataBANK0:
   623  005B                     _password:
   624  005B                     	ds	2
   625                           
   626                           	psect	clrtext
   627  0F64                     clear_ram0:	
   628                           ;	Called with FSR containing the base address, and
   629                           ;	W with the last address+1
   630                           
   631  0F64  0064               	clrwdt	;clear the watchdog before getting into this loop
   632  0F65                     clrloop0:
   633  0F65  0180               	clrf	0	;clear RAM location pointed to by FSR
   634  0F66  0A84               	incf	4,f	;increment pointer
   635  0F67  0604               	xorwf	4,w	;XOR with final address
   636  0F68  1903               	btfsc	3,2	;have we reached the end yet?
   637  0F69  3400               	retlw	0	;all done for this memory range, return
   638  0F6A  0604               	xorwf	4,w	;XOR again to restore value
   639  0F6B  2F65               	goto	clrloop0	;do the next byte
   640                           
   641                           	psect	cstackCOMMON
   642  0070                     __pcstackCOMMON:
   643  0070                     ?_Lcd_Shift_Left:
   644  0070                     ?_Lcd_Shift_Right:	
   645                           ; 1 bytes @ 0x0
   646                           
   647  0070                     ?_Lcd_Clear:	
   648                           ; 1 bytes @ 0x0
   649                           
   650  0070                     ?_Lcd_Init:	
   651                           ; 1 bytes @ 0x0
   652                           
   653  0070                     ?_Leer_tecla:	
   654                           ; 1 bytes @ 0x0
   655                           
   656  0070                     ??_Leer_tecla:	
   657                           ; 1 bytes @ 0x0
   658                           
   659  0070                     ?_encender_ledVerde:	
   660                           ; 1 bytes @ 0x0
   661                           
   662  0070                     ??_encender_ledVerde:	
   663                           ; 1 bytes @ 0x0
   664                           
   665  0070                     ?_encender_ledRojo:	
   666                           ; 1 bytes @ 0x0
   667                           
   668  0070                     ??_encender_ledRojo:	
   669                           ; 1 bytes @ 0x0
   670                           
   671  0070                     ?_apagar_ledRojo:	
   672                           ; 1 bytes @ 0x0
   673                           
   674  0070                     ??_apagar_ledRojo:	
   675                           ; 1 bytes @ 0x0
   676                           
   677  0070                     ?_pulsar_boton:	
   678                           ; 1 bytes @ 0x0
   679                           
   680  0070                     ??_pulsar_boton:	
   681                           ; 1 bytes @ 0x0
   682                           
   683  0070                     ?_ver_clave:	
   684                           ; 1 bytes @ 0x0
   685                           
   686  0070                     ?_mover:	
   687                           ; 1 bytes @ 0x0
   688                           
   689  0070                     ?_Alarma:	
   690                           ; 1 bytes @ 0x0
   691                           
   692  0070                     ?_inicio:	
   693                           ; 1 bytes @ 0x0
   694                           
   695  0070                     ?_Lcd_Port:	
   696                           ; 1 bytes @ 0x0
   697                           
   698  0070                     ??_Lcd_Port:	
   699                           ; 1 bytes @ 0x0
   700                           
   701  0070                     ?_Lcd_Cmd:	
   702                           ; 1 bytes @ 0x0
   703                           
   704  0070                     ?_Lcd_Write_Char:	
   705                           ; 1 bytes @ 0x0
   706                           
   707  0070                     ?_main:	
   708                           ; 1 bytes @ 0x0
   709                           
   710  0070                     ?___wmul:	
   711                           ; 2 bytes @ 0x0
   712                           
   713  0070                     ?___lwdiv:	
   714                           ; 2 bytes @ 0x0
   715                           
   716  0070                     Lcd_Port@a:	
   717                           ; 2 bytes @ 0x0
   718                           
   719  0070                     ___wmul@multiplier:	
   720                           ; 1 bytes @ 0x0
   721                           
   722  0070                     ___lwdiv@divisor:	
   723                           ; 2 bytes @ 0x0
   724                           
   725                           
   726                           ; 2 bytes @ 0x0
   727  0070                     	ds	1
   728  0071                     ??_Lcd_Cmd:
   729  0071                     ??_Lcd_Write_Char:	
   730                           ; 1 bytes @ 0x1
   731                           
   732                           
   733                           ; 1 bytes @ 0x1
   734  0071                     	ds	1
   735  0072                     Lcd_Write_Char@temp:
   736  0072                     ___wmul@multiplicand:	
   737                           ; 1 bytes @ 0x2
   738                           
   739  0072                     ___lwdiv@dividend:	
   740                           ; 2 bytes @ 0x2
   741                           
   742                           
   743                           ; 2 bytes @ 0x2
   744  0072                     	ds	1
   745  0073                     Lcd_Cmd@a:
   746  0073                     Lcd_Write_Char@y:	
   747                           ; 1 bytes @ 0x3
   748                           
   749                           
   750                           ; 1 bytes @ 0x3
   751  0073                     	ds	1
   752  0074                     ?_Lcd_Set_Cursor:
   753  0074                     ??_Lcd_Shift_Left:	
   754                           ; 1 bytes @ 0x4
   755                           
   756  0074                     ??_Lcd_Shift_Right:	
   757                           ; 1 bytes @ 0x4
   758                           
   759  0074                     ??_Lcd_Clear:	
   760                           ; 1 bytes @ 0x4
   761                           
   762  0074                     ??_Lcd_Init:	
   763                           ; 1 bytes @ 0x4
   764                           
   765  0074                     ??_mover:	
   766                           ; 1 bytes @ 0x4
   767                           
   768  0074                     ??___wmul:	
   769                           ; 1 bytes @ 0x4
   770                           
   771  0074                     ??___lwdiv:	
   772                           ; 1 bytes @ 0x4
   773                           
   774  0074                     Lcd_Set_Cursor@b:	
   775                           ; 1 bytes @ 0x4
   776                           
   777  0074                     Lcd_Write_Char@a:	
   778                           ; 1 bytes @ 0x4
   779                           
   780  0074                     ___wmul@product:	
   781                           ; 1 bytes @ 0x4
   782                           
   783                           
   784                           ; 2 bytes @ 0x4
   785  0074                     	ds	1
   786  0075                     ??_Lcd_Set_Cursor:
   787  0075                     ?_Lcd_Write_String:	
   788                           ; 1 bytes @ 0x5
   789                           
   790  0075                     Lcd_Write_String@a:	
   791                           ; 1 bytes @ 0x5
   792                           
   793  0075                     ___lwdiv@quotient:	
   794                           ; 2 bytes @ 0x5
   795                           
   796                           
   797                           ; 2 bytes @ 0x5
   798  0075                     	ds	2
   799  0077                     ??_Lcd_Write_String:
   800  0077                     Lcd_Set_Cursor@a:	
   801                           ; 1 bytes @ 0x7
   802                           
   803  0077                     ___lwdiv@counter:	
   804                           ; 1 bytes @ 0x7
   805                           
   806  0077                     mover@c:	
   807                           ; 1 bytes @ 0x7
   808                           
   809  0077                     Lcd_Write_String@i:	
   810                           ; 2 bytes @ 0x7
   811                           
   812                           
   813                           ; 2 bytes @ 0x7
   814  0077                     	ds	1
   815  0078                     ?___lwmod:
   816  0078                     Lcd_Set_Cursor@z:	
   817                           ; 2 bytes @ 0x8
   818                           
   819  0078                     ___lwmod@divisor:	
   820                           ; 1 bytes @ 0x8
   821                           
   822                           
   823                           ; 2 bytes @ 0x8
   824  0078                     	ds	1
   825  0079                     Lcd_Set_Cursor@y:
   826  0079                     mover@c_94:	
   827                           ; 1 bytes @ 0x9
   828                           
   829                           
   830                           ; 2 bytes @ 0x9
   831  0079                     	ds	1
   832  007A                     Lcd_Set_Cursor@temp:
   833  007A                     ___lwmod@dividend:	
   834                           ; 1 bytes @ 0xA
   835                           
   836                           
   837                           ; 2 bytes @ 0xA
   838  007A                     	ds	1
   839  007B                     ??_ver_clave:
   840  007B                     ??_Alarma:	
   841                           ; 1 bytes @ 0xB
   842                           
   843  007B                     ??_inicio:	
   844                           ; 1 bytes @ 0xB
   845                           
   846                           
   847                           ; 1 bytes @ 0xB
   848  007B                     	ds	1
   849  007C                     ??___lwmod:
   850                           
   851                           ; 1 bytes @ 0xC
   852  007C                     	ds	1
   853  007D                     ___lwmod@counter:
   854                           
   855                           ; 1 bytes @ 0xD
   856  007D                     	ds	1
   857                           
   858                           	psect	cstackBANK0
   859  0020                     __pcstackBANK0:
   860  0020                     ?_sprintf:
   861  0020                     ver_clave@buffer1:	
   862                           ; 2 bytes @ 0x0
   863                           
   864  0020                     sprintf@f:	
   865                           ; 1 bytes @ 0x0
   866                           
   867  0020                     Alarma@a:	
   868                           ; 1 bytes @ 0x0
   869                           
   870                           
   871                           ; 2 bytes @ 0x0
   872  0020                     	ds	3
   873  0023                     ??_sprintf:
   874                           
   875                           ; 1 bytes @ 0x3
   876  0023                     	ds	3
   877  0026                     sprintf@ap:
   878                           
   879                           ; 1 bytes @ 0x6
   880  0026                     	ds	1
   881  0027                     sprintf@flag:
   882                           
   883                           ; 1 bytes @ 0x7
   884  0027                     	ds	1
   885  0028                     sprintf@prec:
   886                           
   887                           ; 1 bytes @ 0x8
   888  0028                     	ds	1
   889  0029                     sprintf@val:
   890                           
   891                           ; 2 bytes @ 0x9
   892  0029                     	ds	2
   893  002B                     sprintf@sp:
   894                           
   895                           ; 1 bytes @ 0xB
   896  002B                     	ds	1
   897  002C                     sprintf@c:
   898                           
   899                           ; 1 bytes @ 0xC
   900  002C                     	ds	1
   901  002D                     ??_main:
   902                           
   903                           ; 1 bytes @ 0xD
   904  002D                     	ds	6
   905  0033                     main@buffer1:
   906                           
   907                           ; 20 bytes @ 0x13
   908  0033                     	ds	20
   909  0047                     main@tecla:
   910                           
   911                           ; 2 bytes @ 0x27
   912  0047                     	ds	2
   913                           
   914                           	psect	maintext
   915  04CA                     __pmaintext:	
   916 ;;
   917 ;;Main: autosize = 0, tempsize = 6, incstack = 0, save=0
   918 ;;
   919 ;; *************** function _main *****************
   920 ;; Defined at:
   921 ;;		line 96 in file "main.c"
   922 ;; Parameters:    Size  Location     Type
   923 ;;		None
   924 ;; Auto vars:     Size  Location     Type
   925 ;;  tecla           2   39[BANK0 ] int 
   926 ;;  buffer1        20   19[BANK0 ] unsigned char [20]
   927 ;;  x               2    0        int 
   928 ;; Return value:  Size  Location     Type
   929 ;;                  2   91[None  ] int 
   930 ;; Registers used:
   931 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   932 ;; Tracked objects:
   933 ;;		On entry : B00/0
   934 ;;		On exit  : 0/0
   935 ;;		Unchanged: 0/0
   936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   937 ;;      Params:         0       0       0       0       0
   938 ;;      Locals:         0      22       0       0       0
   939 ;;      Temps:          0       6       0       0       0
   940 ;;      Totals:         0      28       0       0       0
   941 ;;Total ram usage:       28 bytes
   942 ;; Hardware stack levels required when called: 4
   943 ;; This function calls:
   944 ;;		_Alarma
   945 ;;		_Lcd_Clear
   946 ;;		_Lcd_Init
   947 ;;		_Lcd_Set_Cursor
   948 ;;		_Lcd_Write_String
   949 ;;		_Leer_tecla
   950 ;;		___wmul
   951 ;;		_apagar_ledRojo
   952 ;;		_encender_ledRojo
   953 ;;		_encender_ledVerde
   954 ;;		_inicio
   955 ;;		_mover
   956 ;;		_pulsar_boton
   957 ;;		_sprintf
   958 ;;		_ver_clave
   959 ;; This function is called by:
   960 ;;		Startup code after reset
   961 ;; This function uses a non-reentrant model
   962 ;;
   963                           
   964  04CA                     _main:	
   965                           ;psect for function _main
   966                           
   967  04CA                     l1645:	
   968                           ;incstack = 0
   969                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   970                           
   971                           
   972                           ;main.c: 98:   int x;;main.c: 100:   char buffer1[20];;main.c: 102:   TRISD = 0x00;
   973  04CA  1683               	bsf	3,5	;RP0=1, select bank1
   974  04CB  1303               	bcf	3,6	;RP1=0, select bank1
   975  04CC  0188               	clrf	8	;volatile
   976                           
   977                           ;main.c: 103:   TRISC = 0x00;
   978  04CD  0187               	clrf	7	;volatile
   979  04CE                     l1647:
   980                           
   981                           ;main.c: 104:   TRISB = 0xF0;
   982  04CE  30F0               	movlw	240
   983  04CF  0086               	movwf	6	;volatile
   984  04D0                     l1649:
   985                           
   986                           ;main.c: 105:   PORTD = 0;
   987  04D0  1283               	bcf	3,5	;RP0=0, select bank0
   988  04D1  1303               	bcf	3,6	;RP1=0, select bank0
   989  04D2  0188               	clrf	8	;volatile
   990  04D3                     l1651:
   991                           
   992                           ;main.c: 106:   PORTC = 0;
   993  04D3  0187               	clrf	7	;volatile
   994  04D4                     l1653:
   995                           
   996                           ;main.c: 107:   PORTB = 0;
   997  04D4  0186               	clrf	6	;volatile
   998  04D5                     l1655:
   999                           
  1000                           ;main.c: 109:   Lcd_Init();
  1001  04D5  120A  118A  22E3  120A  118A  	fcall	_Lcd_Init
  1002  04DA                     l1657:
  1003                           
  1004                           ;main.c: 110:   Lcd_Clear();
  1005  04DA  120A  158A  276C  120A  118A  	fcall	_Lcd_Clear
  1006  04DF                     l1659:
  1007                           
  1008                           ;main.c: 111:   Lcd_Set_Cursor(1,1);
  1009  04DF  01F4               	clrf	Lcd_Set_Cursor@b
  1010  04E0  0AF4               	incf	Lcd_Set_Cursor@b,f
  1011  04E1  3001               	movlw	1
  1012  04E2  120A  118A  223F  120A  118A  	fcall	_Lcd_Set_Cursor
  1013  04E7                     l1661:
  1014                           
  1015                           ;main.c: 112:   Lcd_Write_String("Cerradura Electronica");
  1016  04E7  300B               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1017  04E8  00F5               	movwf	Lcd_Write_String@a
  1018  04E9  3080               	movlw	128
  1019  04EA  00F6               	movwf	Lcd_Write_String@a+1
  1020  04EB  120A  118A  20D1  120A  118A  	fcall	_Lcd_Write_String
  1021  04F0                     l1663:
  1022                           
  1023                           ;main.c: 113:   mover();
  1024  04F0  120A  118A  21F2  120A  118A  	fcall	_mover
  1025  04F5                     l1665:
  1026                           
  1027                           ;main.c: 114:   inicio();
  1028  04F5  120A  118A  20A5  120A  118A  	fcall	_inicio
  1029  04FA                     l1667:
  1030                           
  1031                           ;main.c: 117:   encender_ledRojo();
  1032  04FA  120A  158A  2760  120A  118A  	fcall	_encender_ledRojo
  1033                           
  1034                           ;main.c: 119:   while(intentos<3 && verificar==0){
  1035  04FF  2FCD               	goto	l1799
  1036  0500                     l1669:
  1037                           
  1038                           ;main.c: 121:       int tecla=Leer_tecla();
  1039  0500  120A  118A  2340  120A  118A  	fcall	_Leer_tecla
  1040  0505  1283               	bcf	3,5	;RP0=0, select bank0
  1041  0506  1303               	bcf	3,6	;RP1=0, select bank0
  1042  0507  00AD               	movwf	??_main
  1043  0508  01AE               	clrf	??_main+1
  1044  0509  082D               	movf	??_main,w
  1045  050A  00C7               	movwf	main@tecla
  1046  050B  082E               	movf	??_main+1,w
  1047  050C  00C8               	movwf	main@tecla+1
  1048  050D                     l1671:
  1049                           
  1050                           ;main.c: 122:       _delay((unsigned long)((100)*(4000000/4000.0)));
  1051  050D  3082               	movlw	130
  1052  050E  1283               	bcf	3,5	;RP0=0, select bank0
  1053  050F  1303               	bcf	3,6	;RP1=0, select bank0
  1054  0510  00AE               	movwf	??_main+1
  1055  0511  30DD               	movlw	221
  1056  0512  00AD               	movwf	??_main
  1057  0513                     u1257:
  1058  0513  0BAD               	decfsz	??_main,f
  1059  0514  2D13               	goto	u1257
  1060  0515  0BAE               	decfsz	??_main+1,f
  1061  0516  2D13               	goto	u1257
  1062  0517                     l1673:
  1063                           
  1064                           ;main.c: 124:       if(tecla!=100 && tecla!=35 && tecla!=42){
  1065  0517  3064               	movlw	100
  1066  0518  1283               	bcf	3,5	;RP0=0, select bank0
  1067  0519  1303               	bcf	3,6	;RP1=0, select bank0
  1068  051A  0647               	xorwf	main@tecla,w
  1069  051B  0448               	iorwf	main@tecla+1,w
  1070  051C  1903               	btfsc	3,2
  1071  051D  2D1F               	goto	u1121
  1072  051E  2D20               	goto	u1120
  1073  051F                     u1121:
  1074  051F  2EEA               	goto	l1749
  1075  0520                     u1120:
  1076  0520                     l1675:
  1077  0520  3023               	movlw	35
  1078  0521  0647               	xorwf	main@tecla,w
  1079  0522  0448               	iorwf	main@tecla+1,w
  1080  0523  1903               	btfsc	3,2
  1081  0524  2D26               	goto	u1131
  1082  0525  2D27               	goto	u1130
  1083  0526                     u1131:
  1084  0526  2EEA               	goto	l1749
  1085  0527                     u1130:
  1086  0527                     l1677:
  1087  0527  302A               	movlw	42
  1088  0528  0647               	xorwf	main@tecla,w
  1089  0529  0448               	iorwf	main@tecla+1,w
  1090  052A  1903               	btfsc	3,2
  1091  052B  2D2D               	goto	u1141
  1092  052C  2D2E               	goto	u1140
  1093  052D                     u1141:
  1094  052D  2EEA               	goto	l1749
  1095  052E                     u1140:
  1096  052E                     l1679:
  1097                           
  1098                           ;main.c: 126:           if(estado==0){
  1099  052E  084D               	movf	_estado,w
  1100  052F  044E               	iorwf	_estado+1,w
  1101  0530  1D03               	btfss	3,2
  1102  0531  2D33               	goto	u1151
  1103  0532  2D34               	goto	u1150
  1104  0533                     u1151:
  1105  0533  2D7B               	goto	l1695
  1106  0534                     u1150:
  1107  0534                     l1681:
  1108                           
  1109                           ;main.c: 128:               pulsar_boton();
  1110  0534  120A  158A  2786  120A  118A  	fcall	_pulsar_boton
  1111  0539                     l1683:
  1112                           
  1113                           ;main.c: 129:               x1=tecla;
  1114  0539  1283               	bcf	3,5	;RP0=0, select bank0
  1115  053A  1303               	bcf	3,6	;RP1=0, select bank0
  1116  053B  0848               	movf	main@tecla+1,w
  1117  053C  00DA               	movwf	_x1+1
  1118  053D  0847               	movf	main@tecla,w
  1119  053E  00D9               	movwf	_x1
  1120  053F                     l1685:
  1121                           
  1122                           ;main.c: 130:               clave = x1;
  1123  053F  085A               	movf	_x1+1,w
  1124  0540  00CC               	movwf	_clave+1
  1125  0541  0859               	movf	_x1,w
  1126  0542  00CB               	movwf	_clave
  1127                           
  1128                           ;main.c: 132:               Lcd_Set_Cursor(2,8);
  1129  0543  3008               	movlw	8
  1130  0544  00AD               	movwf	??_main
  1131  0545  082D               	movf	??_main,w
  1132  0546  00F4               	movwf	Lcd_Set_Cursor@b
  1133  0547  3002               	movlw	2
  1134  0548  120A  118A  223F  120A  118A  	fcall	_Lcd_Set_Cursor
  1135  054D                     l1687:
  1136                           
  1137                           ;main.c: 133:               Lcd_Write_String("*");
  1138  054D  3075               	movlw	(low (((STR_1+3)-__stringbase)| (0+32768)))& (0+255)
  1139  054E  00F5               	movwf	Lcd_Write_String@a
  1140  054F  3080               	movlw	128
  1141  0550  00F6               	movwf	Lcd_Write_String@a+1
  1142  0551  120A  118A  20D1  120A  118A  	fcall	_Lcd_Write_String
  1143  0556                     l1689:
  1144                           
  1145                           ;main.c: 134:               _delay((unsigned long)((500)*(4000000/4000.0)));
  1146  0556  3003               	movlw	3
  1147  0557  1283               	bcf	3,5	;RP0=0, select bank0
  1148  0558  1303               	bcf	3,6	;RP1=0, select bank0
  1149  0559  00AF               	movwf	??_main+2
  1150  055A  308A               	movlw	138
  1151  055B  00AE               	movwf	??_main+1
  1152  055C  3055               	movlw	85
  1153  055D  00AD               	movwf	??_main
  1154  055E                     u1267:
  1155  055E  0BAD               	decfsz	??_main,f
  1156  055F  2D5E               	goto	u1267
  1157  0560  0BAE               	decfsz	??_main+1,f
  1158  0561  2D5E               	goto	u1267
  1159  0562  0BAF               	decfsz	??_main+2,f
  1160  0563  2D5E               	goto	u1267
  1161  0564                     l1691:
  1162                           
  1163                           ;main.c: 135:               estado++;
  1164  0564  3001               	movlw	1
  1165  0565  1283               	bcf	3,5	;RP0=0, select bank0
  1166  0566  1303               	bcf	3,6	;RP1=0, select bank0
  1167  0567  07CD               	addwf	_estado,f
  1168  0568  1803               	skipnc
  1169  0569  0ACE               	incf	_estado+1,f
  1170  056A  3000               	movlw	0
  1171  056B  07CE               	addwf	_estado+1,f
  1172  056C                     l1693:
  1173                           
  1174                           ;main.c: 137:               sprintf(buffer1,"%i",clave);
  1175  056C  307C               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1176  056D  00AD               	movwf	??_main
  1177  056E  082D               	movf	??_main,w
  1178  056F  00A0               	movwf	sprintf@f
  1179  0570  084C               	movf	_clave+1,w
  1180  0571  00A2               	movwf	?_sprintf+2
  1181  0572  084B               	movf	_clave,w
  1182  0573  00A1               	movwf	?_sprintf+1
  1183  0574  3033               	movlw	(low (main@buffer1| 0))& (0+255)
  1184  0575  120A  118A  23E2  120A  118A  	fcall	_sprintf
  1185                           
  1186                           ;main.c: 139:           }
  1187  057A  2EEA               	goto	l1749
  1188  057B                     l1695:
  1189  057B  034D               	decf	_estado,w
  1190  057C  044E               	iorwf	_estado+1,w
  1191  057D  1D03               	btfss	3,2
  1192  057E  2D80               	goto	u1161
  1193  057F  2D81               	goto	u1160
  1194  0580                     u1161:
  1195  0580  2DDB               	goto	l1713
  1196  0581                     u1160:
  1197  0581                     l1697:
  1198                           
  1199                           ;main.c: 143:               pulsar_boton();
  1200  0581  120A  158A  2786  120A  118A  	fcall	_pulsar_boton
  1201  0586                     l1699:
  1202                           
  1203                           ;main.c: 144:               x2=tecla;
  1204  0586  1283               	bcf	3,5	;RP0=0, select bank0
  1205  0587  1303               	bcf	3,6	;RP1=0, select bank0
  1206  0588  0848               	movf	main@tecla+1,w
  1207  0589  00D4               	movwf	_x2+1
  1208  058A  0847               	movf	main@tecla,w
  1209  058B  00D3               	movwf	_x2
  1210  058C                     l1701:
  1211                           
  1212                           ;main.c: 145:               clave = 10*x1+x2;
  1213  058C  085A               	movf	_x1+1,w
  1214  058D  00F1               	movwf	___wmul@multiplier+1
  1215  058E  0859               	movf	_x1,w
  1216  058F  00F0               	movwf	___wmul@multiplier
  1217  0590  300A               	movlw	10
  1218  0591  00F2               	movwf	___wmul@multiplicand
  1219  0592  3000               	movlw	0
  1220  0593  00F3               	movwf	___wmul@multiplicand+1
  1221  0594  120A  158A  27DB  120A  118A  	fcall	___wmul
  1222  0599  1283               	bcf	3,5	;RP0=0, select bank0
  1223  059A  1303               	bcf	3,6	;RP1=0, select bank0
  1224  059B  0853               	movf	_x2,w
  1225  059C  0770               	addwf	?___wmul,w
  1226  059D  00CB               	movwf	_clave
  1227  059E  0854               	movf	_x2+1,w
  1228  059F  1803               	skipnc
  1229  05A0  0A54               	incf	_x2+1,w
  1230  05A1  0771               	addwf	?___wmul+1,w
  1231  05A2  00CC               	movwf	_clave+1
  1232  05A3                     l1703:
  1233                           
  1234                           ;main.c: 147:               Lcd_Set_Cursor(2,9);
  1235  05A3  3009               	movlw	9
  1236  05A4  00AD               	movwf	??_main
  1237  05A5  082D               	movf	??_main,w
  1238  05A6  00F4               	movwf	Lcd_Set_Cursor@b
  1239  05A7  3002               	movlw	2
  1240  05A8  120A  118A  223F  120A  118A  	fcall	_Lcd_Set_Cursor
  1241  05AD                     l1705:
  1242                           
  1243                           ;main.c: 148:               Lcd_Write_String("*");
  1244  05AD  3075               	movlw	(low (((STR_1+3)-__stringbase)| (0+32768)))& (0+255)
  1245  05AE  00F5               	movwf	Lcd_Write_String@a
  1246  05AF  3080               	movlw	128
  1247  05B0  00F6               	movwf	Lcd_Write_String@a+1
  1248  05B1  120A  118A  20D1  120A  118A  	fcall	_Lcd_Write_String
  1249  05B6                     l1707:
  1250                           
  1251                           ;main.c: 149:               _delay((unsigned long)((500)*(4000000/4000.0)));
  1252  05B6  3003               	movlw	3
  1253  05B7  1283               	bcf	3,5	;RP0=0, select bank0
  1254  05B8  1303               	bcf	3,6	;RP1=0, select bank0
  1255  05B9  00AF               	movwf	??_main+2
  1256  05BA  308A               	movlw	138
  1257  05BB  00AE               	movwf	??_main+1
  1258  05BC  3055               	movlw	85
  1259  05BD  00AD               	movwf	??_main
  1260  05BE                     u1277:
  1261  05BE  0BAD               	decfsz	??_main,f
  1262  05BF  2DBE               	goto	u1277
  1263  05C0  0BAE               	decfsz	??_main+1,f
  1264  05C1  2DBE               	goto	u1277
  1265  05C2  0BAF               	decfsz	??_main+2,f
  1266  05C3  2DBE               	goto	u1277
  1267  05C4                     l1709:
  1268                           
  1269                           ;main.c: 151:               estado++;
  1270  05C4  3001               	movlw	1
  1271  05C5  1283               	bcf	3,5	;RP0=0, select bank0
  1272  05C6  1303               	bcf	3,6	;RP1=0, select bank0
  1273  05C7  07CD               	addwf	_estado,f
  1274  05C8  1803               	skipnc
  1275  05C9  0ACE               	incf	_estado+1,f
  1276  05CA  3000               	movlw	0
  1277  05CB  07CE               	addwf	_estado+1,f
  1278  05CC                     l1711:
  1279                           
  1280                           ;main.c: 153:               sprintf(buffer1,"%i",clave);
  1281  05CC  307C               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1282  05CD  00AD               	movwf	??_main
  1283  05CE  082D               	movf	??_main,w
  1284  05CF  00A0               	movwf	sprintf@f
  1285  05D0  084C               	movf	_clave+1,w
  1286  05D1  00A2               	movwf	?_sprintf+2
  1287  05D2  084B               	movf	_clave,w
  1288  05D3  00A1               	movwf	?_sprintf+1
  1289  05D4  3033               	movlw	(low (main@buffer1| 0))& (0+255)
  1290  05D5  120A  118A  23E2  120A  118A  	fcall	_sprintf
  1291                           
  1292                           ;main.c: 154:           }
  1293  05DA  2EEA               	goto	l1749
  1294  05DB                     l1713:
  1295  05DB  3002               	movlw	2
  1296  05DC  064D               	xorwf	_estado,w
  1297  05DD  044E               	iorwf	_estado+1,w
  1298  05DE  1D03               	btfss	3,2
  1299  05DF  2DE1               	goto	u1171
  1300  05E0  2DE2               	goto	u1170
  1301  05E1                     u1171:
  1302  05E1  2E57               	goto	l1731
  1303  05E2                     u1170:
  1304  05E2                     l1715:
  1305                           
  1306                           ;main.c: 158:               pulsar_boton();
  1307  05E2  120A  158A  2786  120A  118A  	fcall	_pulsar_boton
  1308  05E7                     l1717:
  1309                           
  1310                           ;main.c: 159:               x3=tecla;
  1311  05E7  1283               	bcf	3,5	;RP0=0, select bank0
  1312  05E8  1303               	bcf	3,6	;RP1=0, select bank0
  1313  05E9  0848               	movf	main@tecla+1,w
  1314  05EA  00D2               	movwf	_x3+1
  1315  05EB  0847               	movf	main@tecla,w
  1316  05EC  00D1               	movwf	_x3
  1317  05ED                     l1719:
  1318                           
  1319                           ;main.c: 160:               clave = 100*x1+10*x2+x3;
  1320  05ED  085A               	movf	_x1+1,w
  1321  05EE  00F1               	movwf	___wmul@multiplier+1
  1322  05EF  0859               	movf	_x1,w
  1323  05F0  00F0               	movwf	___wmul@multiplier
  1324  05F1  3064               	movlw	100
  1325  05F2  00F2               	movwf	___wmul@multiplicand
  1326  05F3  3000               	movlw	0
  1327  05F4  00F3               	movwf	___wmul@multiplicand+1
  1328  05F5  120A  158A  27DB  120A  118A  	fcall	___wmul
  1329  05FA  0870               	movf	?___wmul,w
  1330  05FB  1283               	bcf	3,5	;RP0=0, select bank0
  1331  05FC  1303               	bcf	3,6	;RP1=0, select bank0
  1332  05FD  00AD               	movwf	??_main
  1333  05FE  0871               	movf	?___wmul+1,w
  1334  05FF  00AE               	movwf	??_main+1
  1335  0600  0854               	movf	_x2+1,w
  1336  0601  00F1               	movwf	___wmul@multiplier+1
  1337  0602  0853               	movf	_x2,w
  1338  0603  00F0               	movwf	___wmul@multiplier
  1339  0604  300A               	movlw	10
  1340  0605  00F2               	movwf	___wmul@multiplicand
  1341  0606  3000               	movlw	0
  1342  0607  00F3               	movwf	___wmul@multiplicand+1
  1343  0608  120A  158A  27DB  120A  118A  	fcall	___wmul
  1344  060D  0870               	movf	?___wmul,w
  1345  060E  1283               	bcf	3,5	;RP0=0, select bank0
  1346  060F  1303               	bcf	3,6	;RP1=0, select bank0
  1347  0610  072D               	addwf	??_main,w
  1348  0611  00AF               	movwf	??_main+2
  1349  0612  0871               	movf	?___wmul+1,w
  1350  0613  1803               	skipnc
  1351  0614  0A71               	incf	?___wmul+1,w
  1352  0615  072E               	addwf	??_main+1,w
  1353  0616  00B0               	movwf	??_main+3
  1354  0617  0851               	movf	_x3,w
  1355  0618  072F               	addwf	??_main+2,w
  1356  0619  00CB               	movwf	_clave
  1357  061A  0852               	movf	_x3+1,w
  1358  061B  1803               	skipnc
  1359  061C  0A52               	incf	_x3+1,w
  1360  061D  0730               	addwf	??_main+3,w
  1361  061E  00CC               	movwf	_clave+1
  1362  061F                     l1721:
  1363                           
  1364                           ;main.c: 162:               Lcd_Set_Cursor(2,10);
  1365  061F  300A               	movlw	10
  1366  0620  00AD               	movwf	??_main
  1367  0621  082D               	movf	??_main,w
  1368  0622  00F4               	movwf	Lcd_Set_Cursor@b
  1369  0623  3002               	movlw	2
  1370  0624  120A  118A  223F  120A  118A  	fcall	_Lcd_Set_Cursor
  1371  0629                     l1723:
  1372                           
  1373                           ;main.c: 163:               Lcd_Write_String("*");
  1374  0629  3075               	movlw	(low (((STR_1+3)-__stringbase)| (0+32768)))& (0+255)
  1375  062A  00F5               	movwf	Lcd_Write_String@a
  1376  062B  3080               	movlw	128
  1377  062C  00F6               	movwf	Lcd_Write_String@a+1
  1378  062D  120A  118A  20D1  120A  118A  	fcall	_Lcd_Write_String
  1379  0632                     l1725:
  1380                           
  1381                           ;main.c: 164:               _delay((unsigned long)((500)*(4000000/4000.0)));
  1382  0632  3003               	movlw	3
  1383  0633  1283               	bcf	3,5	;RP0=0, select bank0
  1384  0634  1303               	bcf	3,6	;RP1=0, select bank0
  1385  0635  00AF               	movwf	??_main+2
  1386  0636  308A               	movlw	138
  1387  0637  00AE               	movwf	??_main+1
  1388  0638  3055               	movlw	85
  1389  0639  00AD               	movwf	??_main
  1390  063A                     u1287:
  1391  063A  0BAD               	decfsz	??_main,f
  1392  063B  2E3A               	goto	u1287
  1393  063C  0BAE               	decfsz	??_main+1,f
  1394  063D  2E3A               	goto	u1287
  1395  063E  0BAF               	decfsz	??_main+2,f
  1396  063F  2E3A               	goto	u1287
  1397  0640                     l1727:
  1398                           
  1399                           ;main.c: 166:               estado++;
  1400  0640  3001               	movlw	1
  1401  0641  1283               	bcf	3,5	;RP0=0, select bank0
  1402  0642  1303               	bcf	3,6	;RP1=0, select bank0
  1403  0643  07CD               	addwf	_estado,f
  1404  0644  1803               	skipnc
  1405  0645  0ACE               	incf	_estado+1,f
  1406  0646  3000               	movlw	0
  1407  0647  07CE               	addwf	_estado+1,f
  1408  0648                     l1729:
  1409                           
  1410                           ;main.c: 168:              sprintf(buffer1,"%i",clave);
  1411  0648  307C               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1412  0649  00AD               	movwf	??_main
  1413  064A  082D               	movf	??_main,w
  1414  064B  00A0               	movwf	sprintf@f
  1415  064C  084C               	movf	_clave+1,w
  1416  064D  00A2               	movwf	?_sprintf+2
  1417  064E  084B               	movf	_clave,w
  1418  064F  00A1               	movwf	?_sprintf+1
  1419  0650  3033               	movlw	(low (main@buffer1| 0))& (0+255)
  1420  0651  120A  118A  23E2  120A  118A  	fcall	_sprintf
  1421                           
  1422                           ;main.c: 170:               }
  1423  0656  2EEA               	goto	l1749
  1424  0657                     l1731:
  1425  0657  3003               	movlw	3
  1426  0658  064D               	xorwf	_estado,w
  1427  0659  044E               	iorwf	_estado+1,w
  1428  065A  1D03               	btfss	3,2
  1429  065B  2E5D               	goto	u1181
  1430  065C  2E5E               	goto	u1180
  1431  065D                     u1181:
  1432  065D  2EEA               	goto	l96
  1433  065E                     u1180:
  1434  065E                     l1733:
  1435                           
  1436                           ;main.c: 174:               pulsar_boton();
  1437  065E  120A  158A  2786  120A  118A  	fcall	_pulsar_boton
  1438  0663                     l1735:
  1439                           
  1440                           ;main.c: 175:               x4=tecla;
  1441  0663  1283               	bcf	3,5	;RP0=0, select bank0
  1442  0664  1303               	bcf	3,6	;RP1=0, select bank0
  1443  0665  0848               	movf	main@tecla+1,w
  1444  0666  00D0               	movwf	_x4+1
  1445  0667  0847               	movf	main@tecla,w
  1446  0668  00CF               	movwf	_x4
  1447  0669                     l1737:
  1448                           
  1449                           ;main.c: 176:               clave = 1000*x1+100*x2+10*x3+x4;
  1450  0669  085A               	movf	_x1+1,w
  1451  066A  00F1               	movwf	___wmul@multiplier+1
  1452  066B  0859               	movf	_x1,w
  1453  066C  00F0               	movwf	___wmul@multiplier
  1454  066D  30E8               	movlw	232
  1455  066E  00F2               	movwf	___wmul@multiplicand
  1456  066F  3003               	movlw	3
  1457  0670  00F3               	movwf	___wmul@multiplicand+1
  1458  0671  120A  158A  27DB  120A  118A  	fcall	___wmul
  1459  0676  0870               	movf	?___wmul,w
  1460  0677  1283               	bcf	3,5	;RP0=0, select bank0
  1461  0678  1303               	bcf	3,6	;RP1=0, select bank0
  1462  0679  00AD               	movwf	??_main
  1463  067A  0871               	movf	?___wmul+1,w
  1464  067B  00AE               	movwf	??_main+1
  1465  067C  0854               	movf	_x2+1,w
  1466  067D  00F1               	movwf	___wmul@multiplier+1
  1467  067E  0853               	movf	_x2,w
  1468  067F  00F0               	movwf	___wmul@multiplier
  1469  0680  3064               	movlw	100
  1470  0681  00F2               	movwf	___wmul@multiplicand
  1471  0682  3000               	movlw	0
  1472  0683  00F3               	movwf	___wmul@multiplicand+1
  1473  0684  120A  158A  27DB  120A  118A  	fcall	___wmul
  1474  0689  0870               	movf	?___wmul,w
  1475  068A  1283               	bcf	3,5	;RP0=0, select bank0
  1476  068B  1303               	bcf	3,6	;RP1=0, select bank0
  1477  068C  072D               	addwf	??_main,w
  1478  068D  00AF               	movwf	??_main+2
  1479  068E  0871               	movf	?___wmul+1,w
  1480  068F  1803               	skipnc
  1481  0690  0A71               	incf	?___wmul+1,w
  1482  0691  072E               	addwf	??_main+1,w
  1483  0692  00B0               	movwf	??_main+3
  1484  0693  0852               	movf	_x3+1,w
  1485  0694  00F1               	movwf	___wmul@multiplier+1
  1486  0695  0851               	movf	_x3,w
  1487  0696  00F0               	movwf	___wmul@multiplier
  1488  0697  300A               	movlw	10
  1489  0698  00F2               	movwf	___wmul@multiplicand
  1490  0699  3000               	movlw	0
  1491  069A  00F3               	movwf	___wmul@multiplicand+1
  1492  069B  120A  158A  27DB  120A  118A  	fcall	___wmul
  1493  06A0  0870               	movf	?___wmul,w
  1494  06A1  1283               	bcf	3,5	;RP0=0, select bank0
  1495  06A2  1303               	bcf	3,6	;RP1=0, select bank0
  1496  06A3  072F               	addwf	??_main+2,w
  1497  06A4  00B1               	movwf	??_main+4
  1498  06A5  0871               	movf	?___wmul+1,w
  1499  06A6  1803               	skipnc
  1500  06A7  0A71               	incf	?___wmul+1,w
  1501  06A8  0730               	addwf	??_main+3,w
  1502  06A9  00B2               	movwf	??_main+5
  1503  06AA  084F               	movf	_x4,w
  1504  06AB  0731               	addwf	??_main+4,w
  1505  06AC  00CB               	movwf	_clave
  1506  06AD  0850               	movf	_x4+1,w
  1507  06AE  1803               	skipnc
  1508  06AF  0A50               	incf	_x4+1,w
  1509  06B0  0732               	addwf	??_main+5,w
  1510  06B1  00CC               	movwf	_clave+1
  1511  06B2                     l1739:
  1512                           
  1513                           ;main.c: 178:               Lcd_Set_Cursor(2,11);
  1514  06B2  300B               	movlw	11
  1515  06B3  00AD               	movwf	??_main
  1516  06B4  082D               	movf	??_main,w
  1517  06B5  00F4               	movwf	Lcd_Set_Cursor@b
  1518  06B6  3002               	movlw	2
  1519  06B7  120A  118A  223F  120A  118A  	fcall	_Lcd_Set_Cursor
  1520  06BC                     l1741:
  1521                           
  1522                           ;main.c: 179:               Lcd_Write_String("*");
  1523  06BC  3075               	movlw	(low (((STR_1+3)-__stringbase)| (0+32768)))& (0+255)
  1524  06BD  00F5               	movwf	Lcd_Write_String@a
  1525  06BE  3080               	movlw	128
  1526  06BF  00F6               	movwf	Lcd_Write_String@a+1
  1527  06C0  120A  118A  20D1  120A  118A  	fcall	_Lcd_Write_String
  1528  06C5                     l1743:
  1529                           
  1530                           ;main.c: 180:               _delay((unsigned long)((500)*(4000000/4000.0)));
  1531  06C5  3003               	movlw	3
  1532  06C6  1283               	bcf	3,5	;RP0=0, select bank0
  1533  06C7  1303               	bcf	3,6	;RP1=0, select bank0
  1534  06C8  00AF               	movwf	??_main+2
  1535  06C9  308A               	movlw	138
  1536  06CA  00AE               	movwf	??_main+1
  1537  06CB  3055               	movlw	85
  1538  06CC  00AD               	movwf	??_main
  1539  06CD                     u1297:
  1540  06CD  0BAD               	decfsz	??_main,f
  1541  06CE  2ECD               	goto	u1297
  1542  06CF  0BAE               	decfsz	??_main+1,f
  1543  06D0  2ECD               	goto	u1297
  1544  06D1  0BAF               	decfsz	??_main+2,f
  1545  06D2  2ECD               	goto	u1297
  1546  06D3                     l1745:
  1547                           
  1548                           ;main.c: 182:               estado++;
  1549  06D3  3001               	movlw	1
  1550  06D4  1283               	bcf	3,5	;RP0=0, select bank0
  1551  06D5  1303               	bcf	3,6	;RP1=0, select bank0
  1552  06D6  07CD               	addwf	_estado,f
  1553  06D7  1803               	skipnc
  1554  06D8  0ACE               	incf	_estado+1,f
  1555  06D9  3000               	movlw	0
  1556  06DA  07CE               	addwf	_estado+1,f
  1557  06DB                     l1747:
  1558                           
  1559                           ;main.c: 184:               sprintf(buffer1,"%i",clave);
  1560  06DB  307C               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1561  06DC  00AD               	movwf	??_main
  1562  06DD  082D               	movf	??_main,w
  1563  06DE  00A0               	movwf	sprintf@f
  1564  06DF  084C               	movf	_clave+1,w
  1565  06E0  00A2               	movwf	?_sprintf+2
  1566  06E1  084B               	movf	_clave,w
  1567  06E2  00A1               	movwf	?_sprintf+1
  1568  06E3  3033               	movlw	(low (main@buffer1| 0))& (0+255)
  1569  06E4  120A  118A  23E2  120A  118A  	fcall	_sprintf
  1570  06E9  2EEA               	goto	l1749
  1571  06EA                     l96:
  1572  06EA                     l1749:
  1573                           
  1574                           ;main.c: 188:             if(tecla==35){
  1575  06EA  3023               	movlw	35
  1576  06EB  1283               	bcf	3,5	;RP0=0, select bank0
  1577  06EC  1303               	bcf	3,6	;RP1=0, select bank0
  1578  06ED  0647               	xorwf	main@tecla,w
  1579  06EE  0448               	iorwf	main@tecla+1,w
  1580  06EF  1D03               	btfss	3,2
  1581  06F0  2EF2               	goto	u1191
  1582  06F1  2EF3               	goto	u1190
  1583  06F2                     u1191:
  1584  06F2  2EF9               	goto	l1753
  1585  06F3                     u1190:
  1586  06F3                     l1751:
  1587                           
  1588                           ;main.c: 190:                  ver_clave(buffer1);
  1589  06F3  3033               	movlw	(low main@buffer1)& (0+255)
  1590  06F4  120A  118A  2172  120A  118A  	fcall	_ver_clave
  1591  06F9                     l1753:
  1592                           
  1593                           ;main.c: 192:             if(tecla==42){
  1594  06F9  302A               	movlw	42
  1595  06FA  1283               	bcf	3,5	;RP0=0, select bank0
  1596  06FB  1303               	bcf	3,6	;RP1=0, select bank0
  1597  06FC  0647               	xorwf	main@tecla,w
  1598  06FD  0448               	iorwf	main@tecla+1,w
  1599  06FE  1D03               	btfss	3,2
  1600  06FF  2F01               	goto	u1201
  1601  0700  2F02               	goto	u1200
  1602  0701                     u1201:
  1603  0701  2FCD               	goto	l1799
  1604  0702                     u1200:
  1605  0702                     l1755:
  1606                           
  1607                           ;main.c: 194:                 pulsar_boton();
  1608  0702  120A  158A  2786  120A  118A  	fcall	_pulsar_boton
  1609  0707                     l1757:
  1610                           
  1611                           ;main.c: 196:                 if(clave==password){
  1612  0707  30D2               	movlw	210
  1613  0708  1283               	bcf	3,5	;RP0=0, select bank0
  1614  0709  1303               	bcf	3,6	;RP1=0, select bank0
  1615  070A  064B               	xorwf	_clave,w
  1616  070B  3004               	movlw	4
  1617  070C  1903               	skipnz
  1618  070D  064C               	xorwf	_clave+1,w
  1619  070E  1D03               	btfss	3,2
  1620  070F  2F11               	goto	u1211
  1621  0710  2F12               	goto	u1210
  1622  0711                     u1211:
  1623  0711  2F87               	goto	l1781
  1624  0712                     u1210:
  1625  0712                     l1759:
  1626                           
  1627                           ;main.c: 198:                      verificar=1;
  1628  0712  3001               	movlw	1
  1629  0713  00D5               	movwf	_verificar
  1630  0714  3000               	movlw	0
  1631  0715  00D6               	movwf	_verificar+1
  1632  0716                     l1761:
  1633                           
  1634                           ;main.c: 200:                      apagar_ledRojo();
  1635  0716  120A  158A  275C  120A  118A  	fcall	_apagar_ledRojo
  1636                           
  1637                           ;main.c: 201:                      Lcd_Clear();
  1638  071B  120A  158A  276C  120A  118A  	fcall	_Lcd_Clear
  1639                           
  1640                           ;main.c: 202:                      Lcd_Set_Cursor(1,2);
  1641  0720  3002               	movlw	2
  1642  0721  1283               	bcf	3,5	;RP0=0, select bank0
  1643  0722  1303               	bcf	3,6	;RP1=0, select bank0
  1644  0723  00AD               	movwf	??_main
  1645  0724  082D               	movf	??_main,w
  1646  0725  00F4               	movwf	Lcd_Set_Cursor@b
  1647  0726  3001               	movlw	1
  1648  0727  120A  118A  223F  120A  118A  	fcall	_Lcd_Set_Cursor
  1649  072C                     l1763:
  1650                           
  1651                           ;main.c: 203:                      Lcd_Write_String("Clave Correcta");
  1652  072C  3051               	movlw	(low ((STR_14-__stringbase)| (0+32768)))& (0+255)
  1653  072D  00F5               	movwf	Lcd_Write_String@a
  1654  072E  3080               	movlw	128
  1655  072F  00F6               	movwf	Lcd_Write_String@a+1
  1656  0730  120A  118A  20D1  120A  118A  	fcall	_Lcd_Write_String
  1657  0735                     l1765:
  1658                           
  1659                           ;main.c: 204:                      _delay((unsigned long)((3000)*(4000000/4000.0)));
  1660  0735  3010               	movlw	16
  1661  0736  1283               	bcf	3,5	;RP0=0, select bank0
  1662  0737  1303               	bcf	3,6	;RP1=0, select bank0
  1663  0738  00AF               	movwf	??_main+2
  1664  0739  3039               	movlw	57
  1665  073A  00AE               	movwf	??_main+1
  1666  073B  300D               	movlw	13
  1667  073C  00AD               	movwf	??_main
  1668  073D                     u1307:
  1669  073D  0BAD               	decfsz	??_main,f
  1670  073E  2F3D               	goto	u1307
  1671  073F  0BAE               	decfsz	??_main+1,f
  1672  0740  2F3D               	goto	u1307
  1673  0741  0BAF               	decfsz	??_main+2,f
  1674  0742  2F3D               	goto	u1307
  1675  0743                     l1767:
  1676                           
  1677                           ;main.c: 205:                      Lcd_Clear();
  1678  0743  120A  158A  276C  120A  118A  	fcall	_Lcd_Clear
  1679  0748                     l1769:
  1680                           
  1681                           ;main.c: 206:                      Lcd_Set_Cursor(1,4);
  1682  0748  3004               	movlw	4
  1683  0749  1283               	bcf	3,5	;RP0=0, select bank0
  1684  074A  1303               	bcf	3,6	;RP1=0, select bank0
  1685  074B  00AD               	movwf	??_main
  1686  074C  082D               	movf	??_main,w
  1687  074D  00F4               	movwf	Lcd_Set_Cursor@b
  1688  074E  3001               	movlw	1
  1689  074F  120A  118A  223F  120A  118A  	fcall	_Lcd_Set_Cursor
  1690  0754                     l1771:
  1691                           
  1692                           ;main.c: 207:                      Lcd_Write_String("Cerradura");
  1693  0754  3060               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  1694  0755  00F5               	movwf	Lcd_Write_String@a
  1695  0756  3080               	movlw	128
  1696  0757  00F6               	movwf	Lcd_Write_String@a+1
  1697  0758  120A  118A  20D1  120A  118A  	fcall	_Lcd_Write_String
  1698  075D                     l1773:
  1699                           
  1700                           ;main.c: 208:                      Lcd_Set_Cursor(2,4);
  1701  075D  3004               	movlw	4
  1702  075E  1283               	bcf	3,5	;RP0=0, select bank0
  1703  075F  1303               	bcf	3,6	;RP1=0, select bank0
  1704  0760  00AD               	movwf	??_main
  1705  0761  082D               	movf	??_main,w
  1706  0762  00F4               	movwf	Lcd_Set_Cursor@b
  1707  0763  3002               	movlw	2
  1708  0764  120A  118A  223F  120A  118A  	fcall	_Lcd_Set_Cursor
  1709  0769                     l1775:
  1710                           
  1711                           ;main.c: 209:                      Lcd_Write_String("Abierta");
  1712  0769  306A               	movlw	(low ((STR_16-__stringbase)| (0+32768)))& (0+255)
  1713  076A  00F5               	movwf	Lcd_Write_String@a
  1714  076B  3080               	movlw	128
  1715  076C  00F6               	movwf	Lcd_Write_String@a+1
  1716  076D  120A  118A  20D1  120A  118A  	fcall	_Lcd_Write_String
  1717  0772                     l1777:
  1718                           
  1719                           ;main.c: 212:                      encender_ledVerde();
  1720  0772  120A  118A  2094  120A  118A  	fcall	_encender_ledVerde
  1721  0777                     l1779:
  1722                           
  1723                           ;main.c: 213:                      _delay((unsigned long)((7000)*(4000000/4000.0)));
  1724  0777  3024               	movlw	36
  1725  0778  1283               	bcf	3,5	;RP0=0, select bank0
  1726  0779  1303               	bcf	3,6	;RP1=0, select bank0
  1727  077A  00AF               	movwf	??_main+2
  1728  077B  3083               	movlw	131
  1729  077C  00AE               	movwf	??_main+1
  1730  077D  30CE               	movlw	206
  1731  077E  00AD               	movwf	??_main
  1732  077F                     u1317:
  1733  077F  0BAD               	decfsz	??_main,f
  1734  0780  2F7F               	goto	u1317
  1735  0781  0BAE               	decfsz	??_main+1,f
  1736  0782  2F7F               	goto	u1317
  1737  0783  0BAF               	decfsz	??_main+2,f
  1738  0784  2F7F               	goto	u1317
  1739  0785  0000               	nop
  1740                           
  1741                           ;main.c: 216:                 }
  1742  0786  2FCD               	goto	l1799
  1743  0787                     l1781:
  1744                           
  1745                           ;main.c: 218:                      intentos++;
  1746  0787  3001               	movlw	1
  1747  0788  07D7               	addwf	_intentos,f
  1748  0789  1803               	skipnc
  1749  078A  0AD8               	incf	_intentos+1,f
  1750  078B  3000               	movlw	0
  1751  078C  07D8               	addwf	_intentos+1,f
  1752  078D                     l1783:
  1753                           
  1754                           ;main.c: 219:                      estado=0;
  1755  078D  01CD               	clrf	_estado
  1756  078E  01CE               	clrf	_estado+1
  1757  078F                     l1785:
  1758                           
  1759                           ;main.c: 220:                      Lcd_Clear();
  1760  078F  120A  158A  276C  120A  118A  	fcall	_Lcd_Clear
  1761  0794                     l1787:
  1762                           
  1763                           ;main.c: 221:                      Lcd_Set_Cursor(1,1);
  1764  0794  01F4               	clrf	Lcd_Set_Cursor@b
  1765  0795  0AF4               	incf	Lcd_Set_Cursor@b,f
  1766  0796  3001               	movlw	1
  1767  0797  120A  118A  223F  120A  118A  	fcall	_Lcd_Set_Cursor
  1768  079C                     l1789:
  1769                           
  1770                           ;main.c: 222:                      Lcd_Write_String("Clave Incorrecta");
  1771  079C  3021               	movlw	(low ((STR_17-__stringbase)| (0+32768)))& (0+255)
  1772  079D  00F5               	movwf	Lcd_Write_String@a
  1773  079E  3080               	movlw	128
  1774  079F  00F6               	movwf	Lcd_Write_String@a+1
  1775  07A0  120A  118A  20D1  120A  118A  	fcall	_Lcd_Write_String
  1776  07A5                     l1791:
  1777                           
  1778                           ;main.c: 225:                      _delay((unsigned long)((1000)*(4000000/4000.0)));
  1779  07A5  3006               	movlw	6
  1780  07A6  1283               	bcf	3,5	;RP0=0, select bank0
  1781  07A7  1303               	bcf	3,6	;RP1=0, select bank0
  1782  07A8  00AF               	movwf	??_main+2
  1783  07A9  3013               	movlw	19
  1784  07AA  00AE               	movwf	??_main+1
  1785  07AB  30AD               	movlw	173
  1786  07AC  00AD               	movwf	??_main
  1787  07AD                     u1327:
  1788  07AD  0BAD               	decfsz	??_main,f
  1789  07AE  2FAD               	goto	u1327
  1790  07AF  0BAE               	decfsz	??_main+1,f
  1791  07B0  2FAD               	goto	u1327
  1792  07B1  0BAF               	decfsz	??_main+2,f
  1793  07B2  2FAD               	goto	u1327
  1794  07B3                     l1793:
  1795                           
  1796                           ;main.c: 227:                  if(intentos<3){
  1797  07B3  1283               	bcf	3,5	;RP0=0, select bank0
  1798  07B4  1303               	bcf	3,6	;RP1=0, select bank0
  1799  07B5  0858               	movf	_intentos+1,w
  1800  07B6  3A80               	xorlw	128
  1801  07B7  00FF               	movwf	btemp+1
  1802  07B8  3080               	movlw	128
  1803  07B9  027F               	subwf	btemp+1,w
  1804  07BA  1D03               	skipz
  1805  07BB  2FBE               	goto	u1225
  1806  07BC  3003               	movlw	3
  1807  07BD  0257               	subwf	_intentos,w
  1808  07BE                     u1225:
  1809  07BE  1803               	skipnc
  1810  07BF  2FC1               	goto	u1221
  1811  07C0  2FC2               	goto	u1220
  1812  07C1                     u1221:
  1813  07C1  2FC8               	goto	l1797
  1814  07C2                     u1220:
  1815  07C2                     l1795:
  1816                           
  1817                           ;main.c: 229:                      inicio();
  1818  07C2  120A  118A  20A5  120A  118A  	fcall	_inicio
  1819                           
  1820                           ;main.c: 231:                  }
  1821  07C7  2FCD               	goto	l1799
  1822  07C8                     l1797:
  1823                           
  1824                           ;main.c: 233:                      Alarma();
  1825  07C8  120A  118A  2291  120A  118A  	fcall	_Alarma
  1826  07CD                     l1799:
  1827                           
  1828                           ;main.c: 119:   while(intentos<3 && verificar==0){
  1829  07CD  1283               	bcf	3,5	;RP0=0, select bank0
  1830  07CE  1303               	bcf	3,6	;RP1=0, select bank0
  1831  07CF  0858               	movf	_intentos+1,w
  1832  07D0  3A80               	xorlw	128
  1833  07D1  00FF               	movwf	btemp+1
  1834  07D2  3080               	movlw	128
  1835  07D3  027F               	subwf	btemp+1,w
  1836  07D4  1D03               	skipz
  1837  07D5  2FD8               	goto	u1235
  1838  07D6  3003               	movlw	3
  1839  07D7  0257               	subwf	_intentos,w
  1840  07D8                     u1235:
  1841  07D8  1803               	skipnc
  1842  07D9  2FDB               	goto	u1231
  1843  07DA  2FDC               	goto	u1230
  1844  07DB                     u1231:
  1845  07DB  2FE4               	goto	l111
  1846  07DC                     u1230:
  1847  07DC                     l1801:
  1848  07DC  1283               	bcf	3,5	;RP0=0, select bank0
  1849  07DD  1303               	bcf	3,6	;RP1=0, select bank0
  1850  07DE  0855               	movf	_verificar,w
  1851  07DF  0456               	iorwf	_verificar+1,w
  1852  07E0  1903               	btfsc	3,2
  1853  07E1  2FE3               	goto	u1241
  1854  07E2  2FE4               	goto	u1240
  1855  07E3                     u1241:
  1856  07E3  2D00               	goto	l1669
  1857  07E4                     u1240:
  1858  07E4                     l111:
  1859  07E4  120A  118A  2800   	ljmp	start
  1860  07E7                     __end_of_main:
  1861                           
  1862                           	psect	text1
  1863  0172                     __ptext1:	
  1864 ;; *************** function _ver_clave *****************
  1865 ;; Defined at:
  1866 ;;		line 44 in file "main.c"
  1867 ;; Parameters:    Size  Location     Type
  1868 ;;  buffer1         1    wreg     unsigned char 
  1869 ;; Auto vars:     Size  Location     Type
  1870 ;;  buffer1         1    0[BANK0 ] unsigned char 
  1871 ;; Return value:  Size  Location     Type
  1872 ;;                  1    wreg      void 
  1873 ;; Registers used:
  1874 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1875 ;; Tracked objects:
  1876 ;;		On entry : 0/0
  1877 ;;		On exit  : 0/0
  1878 ;;		Unchanged: 0/0
  1879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1880 ;;      Params:         0       0       0       0       0
  1881 ;;      Locals:         0       1       0       0       0
  1882 ;;      Temps:          3       0       0       0       0
  1883 ;;      Totals:         3       1       0       0       0
  1884 ;;Total ram usage:        4 bytes
  1885 ;; Hardware stack levels used: 1
  1886 ;; Hardware stack levels required when called: 3
  1887 ;; This function calls:
  1888 ;;		_Lcd_Set_Cursor
  1889 ;;		_Lcd_Write_String
  1890 ;; This function is called by:
  1891 ;;		_main
  1892 ;; This function uses a non-reentrant model
  1893 ;;
  1894                           
  1895  0172                     _ver_clave:	
  1896                           ;psect for function _ver_clave
  1897                           
  1898                           
  1899                           ;incstack = 0
  1900                           ; Regs used in _ver_clave: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1901                           ;ver_clave@buffer1 stored from wreg
  1902  0172  1283               	bcf	3,5	;RP0=0, select bank0
  1903  0173  1303               	bcf	3,6	;RP1=0, select bank0
  1904  0174  00A0               	movwf	ver_clave@buffer1
  1905  0175                     l1457:
  1906                           
  1907                           ;main.c: 46:        Lcd_Set_Cursor(2,8);
  1908  0175  3008               	movlw	8
  1909  0176  00FB               	movwf	??_ver_clave
  1910  0177  087B               	movf	??_ver_clave,w
  1911  0178  00F4               	movwf	Lcd_Set_Cursor@b
  1912  0179  3002               	movlw	2
  1913  017A  120A  118A  223F  120A  118A  	fcall	_Lcd_Set_Cursor
  1914  017F                     l1459:
  1915                           
  1916                           ;main.c: 47:        Lcd_Write_String(buffer1);
  1917  017F  1283               	bcf	3,5	;RP0=0, select bank0
  1918  0180  1303               	bcf	3,6	;RP1=0, select bank0
  1919  0181  0820               	movf	ver_clave@buffer1,w
  1920  0182  00FB               	movwf	??_ver_clave
  1921  0183  01FC               	clrf	??_ver_clave+1
  1922  0184  087B               	movf	??_ver_clave,w
  1923  0185  00F5               	movwf	Lcd_Write_String@a
  1924  0186  087C               	movf	??_ver_clave+1,w
  1925  0187  00F6               	movwf	Lcd_Write_String@a+1
  1926  0188  120A  118A  20D1  120A  118A  	fcall	_Lcd_Write_String
  1927  018D                     l1461:
  1928                           
  1929                           ;main.c: 48:        _delay((unsigned long)((1000)*(4000000/4000.0)));
  1930  018D  3006               	movlw	6
  1931  018E  00FD               	movwf	??_ver_clave+2
  1932  018F  3013               	movlw	19
  1933  0190  00FC               	movwf	??_ver_clave+1
  1934  0191  30AD               	movlw	173
  1935  0192  00FB               	movwf	??_ver_clave
  1936  0193                     u1337:
  1937  0193  0BFB               	decfsz	??_ver_clave,f
  1938  0194  2993               	goto	u1337
  1939  0195  0BFC               	decfsz	??_ver_clave+1,f
  1940  0196  2993               	goto	u1337
  1941  0197  0BFD               	decfsz	??_ver_clave+2,f
  1942  0198  2993               	goto	u1337
  1943  0199  299A               	nop2
  1944  019A                     l1463:
  1945                           
  1946                           ;main.c: 49:        Lcd_Set_Cursor(2,8);
  1947  019A  3008               	movlw	8
  1948  019B  00FB               	movwf	??_ver_clave
  1949  019C  087B               	movf	??_ver_clave,w
  1950  019D  00F4               	movwf	Lcd_Set_Cursor@b
  1951  019E  3002               	movlw	2
  1952  019F  120A  118A  223F  120A  118A  	fcall	_Lcd_Set_Cursor
  1953  01A4                     l1465:
  1954                           
  1955                           ;main.c: 50:        Lcd_Write_String("****");
  1956  01A4  3072               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1957  01A5  00F5               	movwf	Lcd_Write_String@a
  1958  01A6  3080               	movlw	128
  1959  01A7  00F6               	movwf	Lcd_Write_String@a+1
  1960  01A8  120A  118A  20D1  120A  118A  	fcall	_Lcd_Write_String
  1961  01AD                     l72:
  1962  01AD  0008               	return
  1963  01AE                     __end_of_ver_clave:
  1964                           
  1965                           	psect	text2
  1966  03E2                     __ptext2:	
  1967 ;; *************** function _sprintf *****************
  1968 ;; Defined at:
  1969 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c"
  1970 ;; Parameters:    Size  Location     Type
  1971 ;;  sp              1    wreg     PTR unsigned char 
  1972 ;;		 -> main@buffer1(20), 
  1973 ;;  f               1    0[BANK0 ] PTR const unsigned char 
  1974 ;;		 -> STR_13(3), STR_11(3), STR_9(3), STR_7(3), 
  1975 ;; Auto vars:     Size  Location     Type
  1976 ;;  sp              1   11[BANK0 ] PTR unsigned char 
  1977 ;;		 -> main@buffer1(20), 
  1978 ;;  tmpval          4    0        struct .
  1979 ;;  val             2    9[BANK0 ] unsigned int 
  1980 ;;  cp              2    0        PTR const unsigned char 
  1981 ;;  len             2    0        unsigned int 
  1982 ;;  c               1   12[BANK0 ] unsigned char 
  1983 ;;  prec            1    8[BANK0 ] char 
  1984 ;;  flag            1    7[BANK0 ] unsigned char 
  1985 ;;  ap              1    6[BANK0 ] PTR void [1]
  1986 ;;		 -> ?_sprintf(2), 
  1987 ;; Return value:  Size  Location     Type
  1988 ;;                  2    0[BANK0 ] int 
  1989 ;; Registers used:
  1990 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1991 ;; Tracked objects:
  1992 ;;		On entry : 0/0
  1993 ;;		On exit  : 0/0
  1994 ;;		Unchanged: 0/0
  1995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1996 ;;      Params:         0       3       0       0       0
  1997 ;;      Locals:         0       7       0       0       0
  1998 ;;      Temps:          0       3       0       0       0
  1999 ;;      Totals:         0      13       0       0       0
  2000 ;;Total ram usage:       13 bytes
  2001 ;; Hardware stack levels used: 1
  2002 ;; Hardware stack levels required when called: 1
  2003 ;; This function calls:
  2004 ;;		___lwdiv
  2005 ;;		___lwmod
  2006 ;; This function is called by:
  2007 ;;		_main
  2008 ;; This function uses a non-reentrant model
  2009 ;;
  2010                           
  2011  03E2                     _sprintf:	
  2012                           ;psect for function _sprintf
  2013                           
  2014                           
  2015                           ;incstack = 0
  2016                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2017                           ;sprintf@sp stored from wreg
  2018  03E2  1283               	bcf	3,5	;RP0=0, select bank0
  2019  03E3  1303               	bcf	3,6	;RP1=0, select bank0
  2020  03E4  00AB               	movwf	sprintf@sp
  2021  03E5                     l1569:
  2022                           
  2023                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
  2024  03E5  3021               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  2025  03E6  00A3               	movwf	??_sprintf
  2026  03E7  0823               	movf	??_sprintf,w
  2027  03E8  00A6               	movwf	sprintf@ap
  2028                           
  2029                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  2030  03E9  2CB3               	goto	l1621
  2031  03EA                     l1571:
  2032                           
  2033                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  2034  03EA  3025               	movlw	37
  2035  03EB  062C               	xorwf	sprintf@c,w
  2036  03EC  1903               	btfsc	3,2
  2037  03ED  2BEF               	goto	u1011
  2038  03EE  2BF0               	goto	u1010
  2039  03EF                     u1011:
  2040  03EF  2BFC               	goto	l1577
  2041  03F0                     u1010:
  2042  03F0                     l1573:
  2043                           
  2044                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  2045  03F0  082C               	movf	sprintf@c,w
  2046  03F1  00A3               	movwf	??_sprintf
  2047  03F2  082B               	movf	sprintf@sp,w
  2048  03F3  0084               	movwf	4
  2049  03F4  0823               	movf	??_sprintf,w
  2050  03F5  1383               	bcf	3,7	;select IRP bank0
  2051  03F6  0080               	movwf	0
  2052  03F7                     l1575:
  2053  03F7  3001               	movlw	1
  2054  03F8  00A3               	movwf	??_sprintf
  2055  03F9  0823               	movf	??_sprintf,w
  2056  03FA  07AB               	addwf	sprintf@sp,f
  2057                           
  2058                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 559:    continue;
  2059  03FB  2CB3               	goto	l1621
  2060  03FC                     l1577:
  2061                           
  2062                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  2063  03FC  01A7               	clrf	sprintf@flag
  2064  03FD                     l1581:	
  2065                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
  2066                           
  2067  03FD  3001               	movlw	1
  2068  03FE  07A0               	addwf	sprintf@f,f
  2069  03FF  30FF               	movlw	-1
  2070  0400  0720               	addwf	sprintf@f,w
  2071  0401  0084               	movwf	4
  2072  0402  120A  118A  200D  120A  118A  	fcall	stringdir
  2073  0407  00AC               	movwf	sprintf@c
  2074  0408  00A3               	movwf	??_sprintf
  2075  0409  01A4               	clrf	??_sprintf+1
  2076                           
  2077                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2078                           ; Switch size 1, requested type "simple"
  2079                           ; Number of cases is 1, Range of values is 0 to 0
  2080                           ; switch strategies available:
  2081                           ; Name         Instructions Cycles
  2082                           ; simple_byte            4     3 (average)
  2083                           ; direct_byte           11     8 (fixed)
  2084                           ; jumptable            260     6 (fixed)
  2085                           ;	Chosen strategy is simple_byte
  2086  040A  0824               	movf	??_sprintf+1,w
  2087  040B  3A00               	xorlw	0	; case 0
  2088  040C  1903               	skipnz
  2089  040D  2C0F               	goto	l1823
  2090  040E  2CB3               	goto	l1621
  2091  040F                     l1823:
  2092                           
  2093                           ; Switch size 1, requested type "simple"
  2094                           ; Number of cases is 3, Range of values is 0 to 105
  2095                           ; switch strategies available:
  2096                           ; Name         Instructions Cycles
  2097                           ; simple_byte           10     6 (average)
  2098                           ; jumptable            260     6 (fixed)
  2099                           ;	Chosen strategy is simple_byte
  2100  040F  0823               	movf	??_sprintf,w
  2101  0410  3A00               	xorlw	0	; case 0
  2102  0411  1903               	skipnz
  2103  0412  2CC5               	goto	l1623
  2104  0413  3A64               	xorlw	100	; case 100
  2105  0414  1903               	skipnz
  2106  0415  2C1A               	goto	l1583
  2107  0416  3A0D               	xorlw	13	; case 105
  2108  0417  1903               	skipnz
  2109  0418  2C1A               	goto	l1583
  2110  0419  2CB3               	goto	l1621
  2111  041A                     l1583:
  2112                           
  2113                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2114  041A  0826               	movf	sprintf@ap,w
  2115  041B  0084               	movwf	4
  2116  041C  1383               	bcf	3,7	;select IRP bank0
  2117  041D  0800               	movf	0,w
  2118  041E  00A9               	movwf	sprintf@val
  2119  041F  0A84               	incf	4,f
  2120  0420  0800               	movf	0,w
  2121  0421  00AA               	movwf	sprintf@val+1
  2122  0422                     l1585:
  2123  0422  3002               	movlw	2
  2124  0423  00A3               	movwf	??_sprintf
  2125  0424  0823               	movf	??_sprintf,w
  2126  0425  07A6               	addwf	sprintf@ap,f
  2127  0426                     l1587:
  2128                           
  2129                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  2130  0426  1FAA               	btfss	sprintf@val+1,7
  2131  0427  2C29               	goto	u1021
  2132  0428  2C2A               	goto	u1020
  2133  0429                     u1021:
  2134  0429  2C33               	goto	l1593
  2135  042A                     u1020:
  2136  042A                     l1589:
  2137                           
  2138                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  2139  042A  3003               	movlw	3
  2140  042B  00A3               	movwf	??_sprintf
  2141  042C  0823               	movf	??_sprintf,w
  2142  042D  04A7               	iorwf	sprintf@flag,f
  2143  042E                     l1591:
  2144                           
  2145                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  2146  042E  09A9               	comf	sprintf@val,f
  2147  042F  09AA               	comf	sprintf@val+1,f
  2148  0430  0AA9               	incf	sprintf@val,f
  2149  0431  1903               	skipnz
  2150  0432  0AAA               	incf	sprintf@val+1,f
  2151  0433                     l1593:
  2152                           
  2153                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  2154  0433  01AC               	clrf	sprintf@c
  2155  0434  0AAC               	incf	sprintf@c,f
  2156  0435                     l1599:
  2157                           
  2158                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  2159  0435  082C               	movf	sprintf@c,w
  2160  0436  00A3               	movwf	??_sprintf
  2161  0437  0723               	addwf	??_sprintf,w
  2162  0438  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2163  0439  0084               	movwf	4
  2164  043A  120A  118A  200D  120A  118A  	fcall	stringdir
  2165  043F  00A4               	movwf	??_sprintf+1
  2166  0440  120A  118A  200D  120A  118A  	fcall	stringdir
  2167  0445  00A5               	movwf	??_sprintf+2
  2168  0446  0825               	movf	??_sprintf+2,w
  2169  0447  022A               	subwf	sprintf@val+1,w
  2170  0448  1D03               	skipz
  2171  0449  2C4C               	goto	u1035
  2172  044A  0824               	movf	??_sprintf+1,w
  2173  044B  0229               	subwf	sprintf@val,w
  2174  044C                     u1035:
  2175  044C  1803               	skipnc
  2176  044D  2C4F               	goto	u1031
  2177  044E  2C50               	goto	u1030
  2178  044F                     u1031:
  2179  044F  2C51               	goto	l1603
  2180  0450                     u1030:
  2181  0450  2C5B               	goto	l1605
  2182  0451                     l1603:
  2183  0451  3001               	movlw	1
  2184  0452  00A3               	movwf	??_sprintf
  2185  0453  0823               	movf	??_sprintf,w
  2186  0454  07AC               	addwf	sprintf@c,f
  2187  0455  3005               	movlw	5
  2188  0456  062C               	xorwf	sprintf@c,w
  2189  0457  1D03               	btfss	3,2
  2190  0458  2C5A               	goto	u1041
  2191  0459  2C5B               	goto	u1040
  2192  045A                     u1041:
  2193  045A  2C35               	goto	l1599
  2194  045B                     u1040:
  2195  045B                     l1605:
  2196                           
  2197                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1464:    if(flag & 0x03)
  2198  045B  0827               	movf	sprintf@flag,w
  2199  045C  3903               	andlw	3
  2200  045D  1903               	btfsc	3,2
  2201  045E  2C60               	goto	u1051
  2202  045F  2C61               	goto	u1050
  2203  0460                     u1051:
  2204  0460  2C6C               	goto	l1611
  2205  0461                     u1050:
  2206  0461                     l1607:
  2207                           
  2208                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  2209  0461  302D               	movlw	45
  2210  0462  00A3               	movwf	??_sprintf
  2211  0463  082B               	movf	sprintf@sp,w
  2212  0464  0084               	movwf	4
  2213  0465  0823               	movf	??_sprintf,w
  2214  0466  1383               	bcf	3,7	;select IRP bank0
  2215  0467  0080               	movwf	0
  2216  0468                     l1609:
  2217  0468  3001               	movlw	1
  2218  0469  00A3               	movwf	??_sprintf
  2219  046A  0823               	movf	??_sprintf,w
  2220  046B  07AB               	addwf	sprintf@sp,f
  2221  046C                     l1611:
  2222                           
  2223                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1495:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  2224  046C  082C               	movf	sprintf@c,w
  2225  046D  00A3               	movwf	??_sprintf
  2226  046E  0823               	movf	??_sprintf,w
  2227  046F  00A8               	movwf	sprintf@prec
  2228                           
  2229                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  2230  0470  2CAA               	goto	l1619
  2231  0471                     l1613:
  2232                           
  2233                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  2234  0471  300A               	movlw	10
  2235  0472  00F8               	movwf	___lwmod@divisor
  2236  0473  3000               	movlw	0
  2237  0474  00F9               	movwf	___lwmod@divisor+1
  2238  0475  0828               	movf	sprintf@prec,w
  2239  0476  00A3               	movwf	??_sprintf
  2240  0477  0723               	addwf	??_sprintf,w
  2241  0478  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2242  0479  0084               	movwf	4
  2243  047A  120A  118A  200D  120A  118A  	fcall	stringdir
  2244  047F  00F0               	movwf	___lwdiv@divisor
  2245  0480  120A  118A  200D  120A  118A  	fcall	stringdir
  2246  0485  00F1               	movwf	___lwdiv@divisor+1
  2247  0486  082A               	movf	sprintf@val+1,w
  2248  0487  00F3               	movwf	___lwdiv@dividend+1
  2249  0488  0829               	movf	sprintf@val,w
  2250  0489  00F2               	movwf	___lwdiv@dividend
  2251  048A  120A  118A  21AE  120A  118A  	fcall	___lwdiv
  2252  048F  0871               	movf	?___lwdiv+1,w
  2253  0490  00FB               	movwf	___lwmod@dividend+1
  2254  0491  0870               	movf	?___lwdiv,w
  2255  0492  00FA               	movwf	___lwmod@dividend
  2256  0493  120A  118A  2138  120A  118A  	fcall	___lwmod
  2257  0498  0878               	movf	?___lwmod,w
  2258  0499  3E30               	addlw	48
  2259  049A  1283               	bcf	3,5	;RP0=0, select bank0
  2260  049B  1303               	bcf	3,6	;RP1=0, select bank0
  2261  049C  00A4               	movwf	??_sprintf+1
  2262  049D  0824               	movf	??_sprintf+1,w
  2263  049E  00AC               	movwf	sprintf@c
  2264  049F                     l1615:
  2265                           
  2266                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  2267  049F  082C               	movf	sprintf@c,w
  2268  04A0  00A3               	movwf	??_sprintf
  2269  04A1  082B               	movf	sprintf@sp,w
  2270  04A2  0084               	movwf	4
  2271  04A3  0823               	movf	??_sprintf,w
  2272  04A4  1383               	bcf	3,7	;select IRP bank0
  2273  04A5  0080               	movwf	0
  2274  04A6                     l1617:
  2275  04A6  3001               	movlw	1
  2276  04A7  00A3               	movwf	??_sprintf
  2277  04A8  0823               	movf	??_sprintf,w
  2278  04A9  07AB               	addwf	sprintf@sp,f
  2279  04AA                     l1619:
  2280                           
  2281                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  2282  04AA  30FF               	movlw	255
  2283  04AB  00A3               	movwf	??_sprintf
  2284  04AC  0823               	movf	??_sprintf,w
  2285  04AD  07A8               	addwf	sprintf@prec,f
  2286  04AE  0A28               	incf	sprintf@prec,w
  2287  04AF  1D03               	btfss	3,2
  2288  04B0  2CB2               	goto	u1061
  2289  04B1  2CB3               	goto	u1060
  2290  04B2                     u1061:
  2291  04B2  2C71               	goto	l1613
  2292  04B3                     u1060:
  2293  04B3                     l1621:
  2294                           
  2295                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  2296  04B3  3001               	movlw	1
  2297  04B4  07A0               	addwf	sprintf@f,f
  2298  04B5  30FF               	movlw	-1
  2299  04B6  0720               	addwf	sprintf@f,w
  2300  04B7  0084               	movwf	4
  2301  04B8  120A  118A  200D  120A  118A  	fcall	stringdir
  2302  04BD  00A3               	movwf	??_sprintf
  2303  04BE  0823               	movf	??_sprintf,w
  2304  04BF  00AC               	movwf	sprintf@c
  2305  04C0  082C               	movf	sprintf@c,w
  2306  04C1  1D03               	btfss	3,2
  2307  04C2  2CC4               	goto	u1071
  2308  04C3  2CC5               	goto	u1070
  2309  04C4                     u1071:
  2310  04C4  2BEA               	goto	l1571
  2311  04C5                     u1070:
  2312  04C5                     l1623:
  2313                           
  2314                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  2315  04C5  082B               	movf	sprintf@sp,w
  2316  04C6  0084               	movwf	4
  2317  04C7  1383               	bcf	3,7	;select IRP bank0
  2318  04C8  0180               	clrf	0
  2319  04C9                     l311:
  2320  04C9  0008               	return
  2321  04CA                     __end_of_sprintf:
  2322                           
  2323                           	psect	text3
  2324  0138                     __ptext3:	
  2325 ;; *************** function ___lwmod *****************
  2326 ;; Defined at:
  2327 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lwmod.c"
  2328 ;; Parameters:    Size  Location     Type
  2329 ;;  divisor         2    8[COMMON] unsigned int 
  2330 ;;  dividend        2   10[COMMON] unsigned int 
  2331 ;; Auto vars:     Size  Location     Type
  2332 ;;  counter         1   13[COMMON] unsigned char 
  2333 ;; Return value:  Size  Location     Type
  2334 ;;                  2    8[COMMON] unsigned int 
  2335 ;; Registers used:
  2336 ;;		wreg, status,2, status,0
  2337 ;; Tracked objects:
  2338 ;;		On entry : 0/0
  2339 ;;		On exit  : 0/0
  2340 ;;		Unchanged: 0/0
  2341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2342 ;;      Params:         4       0       0       0       0
  2343 ;;      Locals:         1       0       0       0       0
  2344 ;;      Temps:          1       0       0       0       0
  2345 ;;      Totals:         6       0       0       0       0
  2346 ;;Total ram usage:        6 bytes
  2347 ;; Hardware stack levels used: 1
  2348 ;; This function calls:
  2349 ;;		Nothing
  2350 ;; This function is called by:
  2351 ;;		_sprintf
  2352 ;; This function uses a non-reentrant model
  2353 ;;
  2354                           
  2355  0138                     ___lwmod:	
  2356                           ;psect for function ___lwmod
  2357                           
  2358  0138                     l1423:	
  2359                           ;incstack = 0
  2360                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2361                           
  2362  0138  0878               	movf	___lwmod@divisor,w
  2363  0139  0479               	iorwf	___lwmod@divisor+1,w
  2364  013A  1903               	btfsc	3,2
  2365  013B  293D               	goto	u801
  2366  013C  293E               	goto	u800
  2367  013D                     u801:
  2368  013D  296D               	goto	l1441
  2369  013E                     u800:
  2370  013E                     l1425:
  2371  013E  01FD               	clrf	___lwmod@counter
  2372  013F  0AFD               	incf	___lwmod@counter,f
  2373  0140  294C               	goto	l1431
  2374  0141                     l1427:
  2375  0141  3001               	movlw	1
  2376  0142                     u815:
  2377  0142  1003               	clrc
  2378  0143  0DF8               	rlf	___lwmod@divisor,f
  2379  0144  0DF9               	rlf	___lwmod@divisor+1,f
  2380  0145  3EFF               	addlw	-1
  2381  0146  1D03               	skipz
  2382  0147  2942               	goto	u815
  2383  0148                     l1429:
  2384  0148  3001               	movlw	1
  2385  0149  00FC               	movwf	??___lwmod
  2386  014A  087C               	movf	??___lwmod,w
  2387  014B  07FD               	addwf	___lwmod@counter,f
  2388  014C                     l1431:
  2389  014C  1FF9               	btfss	___lwmod@divisor+1,7
  2390  014D  294F               	goto	u821
  2391  014E  2950               	goto	u820
  2392  014F                     u821:
  2393  014F  2941               	goto	l1427
  2394  0150                     u820:
  2395  0150                     l1433:
  2396  0150  0879               	movf	___lwmod@divisor+1,w
  2397  0151  027B               	subwf	___lwmod@dividend+1,w
  2398  0152  1D03               	skipz
  2399  0153  2956               	goto	u835
  2400  0154  0878               	movf	___lwmod@divisor,w
  2401  0155  027A               	subwf	___lwmod@dividend,w
  2402  0156                     u835:
  2403  0156  1C03               	skipc
  2404  0157  2959               	goto	u831
  2405  0158  295A               	goto	u830
  2406  0159                     u831:
  2407  0159  2960               	goto	l1437
  2408  015A                     u830:
  2409  015A                     l1435:
  2410  015A  0878               	movf	___lwmod@divisor,w
  2411  015B  02FA               	subwf	___lwmod@dividend,f
  2412  015C  0879               	movf	___lwmod@divisor+1,w
  2413  015D  1C03               	skipc
  2414  015E  03FB               	decf	___lwmod@dividend+1,f
  2415  015F  02FB               	subwf	___lwmod@dividend+1,f
  2416  0160                     l1437:
  2417  0160  3001               	movlw	1
  2418  0161                     u845:
  2419  0161  1003               	clrc
  2420  0162  0CF9               	rrf	___lwmod@divisor+1,f
  2421  0163  0CF8               	rrf	___lwmod@divisor,f
  2422  0164  3EFF               	addlw	-1
  2423  0165  1D03               	skipz
  2424  0166  2961               	goto	u845
  2425  0167                     l1439:
  2426  0167  3001               	movlw	1
  2427  0168  02FD               	subwf	___lwmod@counter,f
  2428  0169  1D03               	btfss	3,2
  2429  016A  296C               	goto	u851
  2430  016B  296D               	goto	u850
  2431  016C                     u851:
  2432  016C  2950               	goto	l1433
  2433  016D                     u850:
  2434  016D                     l1441:
  2435  016D  087B               	movf	___lwmod@dividend+1,w
  2436  016E  00F9               	movwf	?___lwmod+1
  2437  016F  087A               	movf	___lwmod@dividend,w
  2438  0170  00F8               	movwf	?___lwmod
  2439  0171                     l597:
  2440  0171  0008               	return
  2441  0172                     __end_of___lwmod:
  2442                           
  2443                           	psect	text4
  2444  01AE                     __ptext4:	
  2445 ;; *************** function ___lwdiv *****************
  2446 ;; Defined at:
  2447 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lwdiv.c"
  2448 ;; Parameters:    Size  Location     Type
  2449 ;;  divisor         2    0[COMMON] unsigned int 
  2450 ;;  dividend        2    2[COMMON] unsigned int 
  2451 ;; Auto vars:     Size  Location     Type
  2452 ;;  quotient        2    5[COMMON] unsigned int 
  2453 ;;  counter         1    7[COMMON] unsigned char 
  2454 ;; Return value:  Size  Location     Type
  2455 ;;                  2    0[COMMON] unsigned int 
  2456 ;; Registers used:
  2457 ;;		wreg, status,2, status,0
  2458 ;; Tracked objects:
  2459 ;;		On entry : 0/0
  2460 ;;		On exit  : 0/0
  2461 ;;		Unchanged: 0/0
  2462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2463 ;;      Params:         4       0       0       0       0
  2464 ;;      Locals:         3       0       0       0       0
  2465 ;;      Temps:          1       0       0       0       0
  2466 ;;      Totals:         8       0       0       0       0
  2467 ;;Total ram usage:        8 bytes
  2468 ;; Hardware stack levels used: 1
  2469 ;; This function calls:
  2470 ;;		Nothing
  2471 ;; This function is called by:
  2472 ;;		_sprintf
  2473 ;; This function uses a non-reentrant model
  2474 ;;
  2475                           
  2476  01AE                     ___lwdiv:	
  2477                           ;psect for function ___lwdiv
  2478                           
  2479  01AE                     l1397:	
  2480                           ;incstack = 0
  2481                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2482                           
  2483  01AE  01F5               	clrf	___lwdiv@quotient
  2484  01AF  01F6               	clrf	___lwdiv@quotient+1
  2485  01B0                     l1399:
  2486  01B0  0870               	movf	___lwdiv@divisor,w
  2487  01B1  0471               	iorwf	___lwdiv@divisor+1,w
  2488  01B2  1903               	btfsc	3,2
  2489  01B3  29B5               	goto	u731
  2490  01B4  29B6               	goto	u730
  2491  01B5                     u731:
  2492  01B5  29ED               	goto	l1419
  2493  01B6                     u730:
  2494  01B6                     l1401:
  2495  01B6  01F7               	clrf	___lwdiv@counter
  2496  01B7  0AF7               	incf	___lwdiv@counter,f
  2497  01B8  29C4               	goto	l1407
  2498  01B9                     l1403:
  2499  01B9  3001               	movlw	1
  2500  01BA                     u745:
  2501  01BA  1003               	clrc
  2502  01BB  0DF0               	rlf	___lwdiv@divisor,f
  2503  01BC  0DF1               	rlf	___lwdiv@divisor+1,f
  2504  01BD  3EFF               	addlw	-1
  2505  01BE  1D03               	skipz
  2506  01BF  29BA               	goto	u745
  2507  01C0                     l1405:
  2508  01C0  3001               	movlw	1
  2509  01C1  00F4               	movwf	??___lwdiv
  2510  01C2  0874               	movf	??___lwdiv,w
  2511  01C3  07F7               	addwf	___lwdiv@counter,f
  2512  01C4                     l1407:
  2513  01C4  1FF1               	btfss	___lwdiv@divisor+1,7
  2514  01C5  29C7               	goto	u751
  2515  01C6  29C8               	goto	u750
  2516  01C7                     u751:
  2517  01C7  29B9               	goto	l1403
  2518  01C8                     u750:
  2519  01C8                     l1409:
  2520  01C8  3001               	movlw	1
  2521  01C9                     u765:
  2522  01C9  1003               	clrc
  2523  01CA  0DF5               	rlf	___lwdiv@quotient,f
  2524  01CB  0DF6               	rlf	___lwdiv@quotient+1,f
  2525  01CC  3EFF               	addlw	-1
  2526  01CD  1D03               	skipz
  2527  01CE  29C9               	goto	u765
  2528  01CF  0871               	movf	___lwdiv@divisor+1,w
  2529  01D0  0273               	subwf	___lwdiv@dividend+1,w
  2530  01D1  1D03               	skipz
  2531  01D2  29D5               	goto	u775
  2532  01D3  0870               	movf	___lwdiv@divisor,w
  2533  01D4  0272               	subwf	___lwdiv@dividend,w
  2534  01D5                     u775:
  2535  01D5  1C03               	skipc
  2536  01D6  29D8               	goto	u771
  2537  01D7  29D9               	goto	u770
  2538  01D8                     u771:
  2539  01D8  29E0               	goto	l1415
  2540  01D9                     u770:
  2541  01D9                     l1411:
  2542  01D9  0870               	movf	___lwdiv@divisor,w
  2543  01DA  02F2               	subwf	___lwdiv@dividend,f
  2544  01DB  0871               	movf	___lwdiv@divisor+1,w
  2545  01DC  1C03               	skipc
  2546  01DD  03F3               	decf	___lwdiv@dividend+1,f
  2547  01DE  02F3               	subwf	___lwdiv@dividend+1,f
  2548  01DF                     l1413:
  2549  01DF  1475               	bsf	___lwdiv@quotient,0
  2550  01E0                     l1415:
  2551  01E0  3001               	movlw	1
  2552  01E1                     u785:
  2553  01E1  1003               	clrc
  2554  01E2  0CF1               	rrf	___lwdiv@divisor+1,f
  2555  01E3  0CF0               	rrf	___lwdiv@divisor,f
  2556  01E4  3EFF               	addlw	-1
  2557  01E5  1D03               	skipz
  2558  01E6  29E1               	goto	u785
  2559  01E7                     l1417:
  2560  01E7  3001               	movlw	1
  2561  01E8  02F7               	subwf	___lwdiv@counter,f
  2562  01E9  1D03               	btfss	3,2
  2563  01EA  29EC               	goto	u791
  2564  01EB  29ED               	goto	u790
  2565  01EC                     u791:
  2566  01EC  29C8               	goto	l1409
  2567  01ED                     u790:
  2568  01ED                     l1419:
  2569  01ED  0876               	movf	___lwdiv@quotient+1,w
  2570  01EE  00F1               	movwf	?___lwdiv+1
  2571  01EF  0875               	movf	___lwdiv@quotient,w
  2572  01F0  00F0               	movwf	?___lwdiv
  2573  01F1                     l587:
  2574  01F1  0008               	return
  2575  01F2                     __end_of___lwdiv:
  2576                           
  2577                           	psect	text5
  2578  0F86                     __ptext5:	
  2579 ;; *************** function _pulsar_boton *****************
  2580 ;; Defined at:
  2581 ;;		line 36 in file "main.c"
  2582 ;; Parameters:    Size  Location     Type
  2583 ;;		None
  2584 ;; Auto vars:     Size  Location     Type
  2585 ;;		None
  2586 ;; Return value:  Size  Location     Type
  2587 ;;                  1    wreg      void 
  2588 ;; Registers used:
  2589 ;;		wreg
  2590 ;; Tracked objects:
  2591 ;;		On entry : 0/0
  2592 ;;		On exit  : 0/0
  2593 ;;		Unchanged: 0/0
  2594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2595 ;;      Params:         0       0       0       0       0
  2596 ;;      Locals:         0       0       0       0       0
  2597 ;;      Temps:          2       0       0       0       0
  2598 ;;      Totals:         2       0       0       0       0
  2599 ;;Total ram usage:        2 bytes
  2600 ;; Hardware stack levels used: 1
  2601 ;; This function calls:
  2602 ;;		Nothing
  2603 ;; This function is called by:
  2604 ;;		_main
  2605 ;; This function uses a non-reentrant model
  2606 ;;
  2607                           
  2608  0F86                     _pulsar_boton:	
  2609                           ;psect for function _pulsar_boton
  2610                           
  2611  0F86                     l1451:	
  2612                           ;incstack = 0
  2613                           ; Regs used in _pulsar_boton: [wreg]
  2614                           
  2615                           
  2616                           ;main.c: 37:     RC2 = 1;
  2617  0F86  1283               	bcf	3,5	;RP0=0, select bank0
  2618  0F87  1303               	bcf	3,6	;RP1=0, select bank0
  2619  0F88  1507               	bsf	7,2	;volatile
  2620  0F89                     l1453:
  2621                           
  2622                           ;main.c: 38:     _delay((unsigned long)((100)*(4000000/4000.0)));
  2623  0F89  3082               	movlw	130
  2624  0F8A  00F1               	movwf	??_pulsar_boton+1
  2625  0F8B  30DD               	movlw	221
  2626  0F8C  00F0               	movwf	??_pulsar_boton
  2627  0F8D                     u1347:
  2628  0F8D  0BF0               	decfsz	??_pulsar_boton,f
  2629  0F8E  2F8D               	goto	u1347
  2630  0F8F  0BF1               	decfsz	??_pulsar_boton+1,f
  2631  0F90  2F8D               	goto	u1347
  2632  0F91  2F92               	nop2
  2633  0F92                     l1455:
  2634                           
  2635                           ;main.c: 39:     RC2 = 0;
  2636  0F92  1283               	bcf	3,5	;RP0=0, select bank0
  2637  0F93  1303               	bcf	3,6	;RP1=0, select bank0
  2638  0F94  1107               	bcf	7,2	;volatile
  2639                           
  2640                           ;main.c: 40:     _delay((unsigned long)((100)*(4000000/4000.0)));
  2641  0F95  3082               	movlw	130
  2642  0F96  00F1               	movwf	??_pulsar_boton+1
  2643  0F97  30DD               	movlw	221
  2644  0F98  00F0               	movwf	??_pulsar_boton
  2645  0F99                     u1357:
  2646  0F99  0BF0               	decfsz	??_pulsar_boton,f
  2647  0F9A  2F99               	goto	u1357
  2648  0F9B  0BF1               	decfsz	??_pulsar_boton+1,f
  2649  0F9C  2F99               	goto	u1357
  2650  0F9D  2F9E               	nop2
  2651  0F9E                     l69:
  2652  0F9E  0008               	return
  2653  0F9F                     __end_of_pulsar_boton:
  2654                           
  2655                           	psect	text6
  2656  01F2                     __ptext6:	
  2657 ;; *************** function _mover *****************
  2658 ;; Defined at:
  2659 ;;		line 54 in file "main.c"
  2660 ;; Parameters:    Size  Location     Type
  2661 ;;		None
  2662 ;; Auto vars:     Size  Location     Type
  2663 ;;  c               2    9[COMMON] int 
  2664 ;;  c               2    7[COMMON] int 
  2665 ;; Return value:  Size  Location     Type
  2666 ;;                  1    wreg      void 
  2667 ;; Registers used:
  2668 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2669 ;; Tracked objects:
  2670 ;;		On entry : 0/0
  2671 ;;		On exit  : 0/0
  2672 ;;		Unchanged: 0/0
  2673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2674 ;;      Params:         0       0       0       0       0
  2675 ;;      Locals:         4       0       0       0       0
  2676 ;;      Temps:          3       0       0       0       0
  2677 ;;      Totals:         7       0       0       0       0
  2678 ;;Total ram usage:        7 bytes
  2679 ;; Hardware stack levels used: 1
  2680 ;; Hardware stack levels required when called: 3
  2681 ;; This function calls:
  2682 ;;		_Lcd_Shift_Left
  2683 ;;		_Lcd_Shift_Right
  2684 ;; This function is called by:
  2685 ;;		_main
  2686 ;; This function uses a non-reentrant model
  2687 ;;
  2688                           
  2689  01F2                     _mover:	
  2690                           ;psect for function _mover
  2691                           
  2692  01F2                     l1467:	
  2693                           ;incstack = 0
  2694                           ; Regs used in _mover: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2695                           
  2696                           
  2697                           ;main.c: 55:     for(int c=0; c<15; c++){
  2698  01F2  01F7               	clrf	mover@c
  2699  01F3  01F8               	clrf	mover@c+1
  2700  01F4                     l1473:
  2701                           
  2702                           ;main.c: 56:     _delay((unsigned long)((400)*(4000000/4000.0)));
  2703  01F4  3003               	movlw	3
  2704  01F5  00F6               	movwf	??_mover+2
  2705  01F6  3008               	movlw	8
  2706  01F7  00F5               	movwf	??_mover+1
  2707  01F8  3077               	movlw	119
  2708  01F9  00F4               	movwf	??_mover
  2709  01FA                     u1367:
  2710  01FA  0BF4               	decfsz	??_mover,f
  2711  01FB  29FA               	goto	u1367
  2712  01FC  0BF5               	decfsz	??_mover+1,f
  2713  01FD  29FA               	goto	u1367
  2714  01FE  0BF6               	decfsz	??_mover+2,f
  2715  01FF  29FA               	goto	u1367
  2716  0200                     l1475:
  2717                           
  2718                           ;main.c: 57:     Lcd_Shift_Left();
  2719  0200  120A  158A  2779  120A  118A  	fcall	_Lcd_Shift_Left
  2720  0205                     l1477:
  2721                           
  2722                           ;main.c: 59:     }
  2723  0205  3001               	movlw	1
  2724  0206  07F7               	addwf	mover@c,f
  2725  0207  1803               	skipnc
  2726  0208  0AF8               	incf	mover@c+1,f
  2727  0209  3000               	movlw	0
  2728  020A  07F8               	addwf	mover@c+1,f
  2729  020B                     l1479:
  2730  020B  0878               	movf	mover@c+1,w
  2731  020C  3A80               	xorlw	128
  2732  020D  00FF               	movwf	btemp+1
  2733  020E  3080               	movlw	128
  2734  020F  027F               	subwf	btemp+1,w
  2735  0210  1D03               	skipz
  2736  0211  2A14               	goto	u865
  2737  0212  300F               	movlw	15
  2738  0213  0277               	subwf	mover@c,w
  2739  0214                     u865:
  2740  0214  1C03               	skipc
  2741  0215  2A17               	goto	u861
  2742  0216  2A18               	goto	u860
  2743  0217                     u861:
  2744  0217  29F4               	goto	l1473
  2745  0218                     u860:
  2746  0218                     l1481:
  2747                           
  2748                           ;main.c: 60:     for(int c=0; c<15; c++){
  2749  0218  01F9               	clrf	mover@c_94
  2750  0219  01FA               	clrf	mover@c_94+1
  2751  021A                     l1487:
  2752                           
  2753                           ;main.c: 61:     _delay((unsigned long)((400)*(4000000/4000.0)));
  2754  021A  3003               	movlw	3
  2755  021B  00F6               	movwf	??_mover+2
  2756  021C  3008               	movlw	8
  2757  021D  00F5               	movwf	??_mover+1
  2758  021E  3077               	movlw	119
  2759  021F  00F4               	movwf	??_mover
  2760  0220                     u1377:
  2761  0220  0BF4               	decfsz	??_mover,f
  2762  0221  2A20               	goto	u1377
  2763  0222  0BF5               	decfsz	??_mover+1,f
  2764  0223  2A20               	goto	u1377
  2765  0224  0BF6               	decfsz	??_mover+2,f
  2766  0225  2A20               	goto	u1377
  2767  0226                     l1489:
  2768                           
  2769                           ;main.c: 62:     Lcd_Shift_Right();
  2770  0226  120A  118A  2098  120A  118A  	fcall	_Lcd_Shift_Right
  2771  022B                     l1491:
  2772                           
  2773                           ;main.c: 63:     }
  2774  022B  3001               	movlw	1
  2775  022C  07F9               	addwf	mover@c_94,f
  2776  022D  1803               	skipnc
  2777  022E  0AFA               	incf	mover@c_94+1,f
  2778  022F  3000               	movlw	0
  2779  0230  07FA               	addwf	mover@c_94+1,f
  2780  0231                     l1493:
  2781  0231  087A               	movf	mover@c_94+1,w
  2782  0232  3A80               	xorlw	128
  2783  0233  00FF               	movwf	btemp+1
  2784  0234  3080               	movlw	128
  2785  0235  027F               	subwf	btemp+1,w
  2786  0236  1D03               	skipz
  2787  0237  2A3A               	goto	u875
  2788  0238  300F               	movlw	15
  2789  0239  0279               	subwf	mover@c_94,w
  2790  023A                     u875:
  2791  023A  1C03               	skipc
  2792  023B  2A3D               	goto	u871
  2793  023C  2A3E               	goto	u870
  2794  023D                     u871:
  2795  023D  2A1A               	goto	l1487
  2796  023E                     u870:
  2797  023E                     l79:
  2798  023E  0008               	return
  2799  023F                     __end_of_mover:
  2800                           
  2801                           	psect	text7
  2802  0098                     __ptext7:	
  2803 ;; *************** function _Lcd_Shift_Right *****************
  2804 ;; Defined at:
  2805 ;;		line 105 in file "lcd.c"
  2806 ;; Parameters:    Size  Location     Type
  2807 ;;		None
  2808 ;; Auto vars:     Size  Location     Type
  2809 ;;		None
  2810 ;; Return value:  Size  Location     Type
  2811 ;;                  1    wreg      void 
  2812 ;; Registers used:
  2813 ;;		wreg, status,2, status,0, pclath, cstack
  2814 ;; Tracked objects:
  2815 ;;		On entry : 0/0
  2816 ;;		On exit  : 0/0
  2817 ;;		Unchanged: 0/0
  2818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2819 ;;      Params:         0       0       0       0       0
  2820 ;;      Locals:         0       0       0       0       0
  2821 ;;      Temps:          0       0       0       0       0
  2822 ;;      Totals:         0       0       0       0       0
  2823 ;;Total ram usage:        0 bytes
  2824 ;; Hardware stack levels used: 1
  2825 ;; Hardware stack levels required when called: 2
  2826 ;; This function calls:
  2827 ;;		_Lcd_Cmd
  2828 ;; This function is called by:
  2829 ;;		_mover
  2830 ;; This function uses a non-reentrant model
  2831 ;;
  2832                           
  2833  0098                     _Lcd_Shift_Right:	
  2834                           ;psect for function _Lcd_Shift_Right
  2835                           
  2836  0098                     l1393:	
  2837                           ;incstack = 0
  2838                           ; Regs used in _Lcd_Shift_Right: [wreg+status,2+status,0+pclath+cstack]
  2839                           
  2840                           
  2841                           ;lcd.c: 107:  Lcd_Cmd(0x01);
  2842  0098  3001               	movlw	1
  2843  0099  120A  158A  279F  120A  118A  	fcall	_Lcd_Cmd
  2844                           
  2845                           ;lcd.c: 108:  Lcd_Cmd(0x0C);
  2846  009E  300C               	movlw	12
  2847  009F  120A  158A  279F  120A  118A  	fcall	_Lcd_Cmd
  2848  00A4                     l163:
  2849  00A4  0008               	return
  2850  00A5                     __end_of_Lcd_Shift_Right:
  2851                           
  2852                           	psect	text8
  2853  0F79                     __ptext8:	
  2854 ;; *************** function _Lcd_Shift_Left *****************
  2855 ;; Defined at:
  2856 ;;		line 111 in file "lcd.c"
  2857 ;; Parameters:    Size  Location     Type
  2858 ;;		None
  2859 ;; Auto vars:     Size  Location     Type
  2860 ;;		None
  2861 ;; Return value:  Size  Location     Type
  2862 ;;                  1    wreg      void 
  2863 ;; Registers used:
  2864 ;;		wreg, status,2, status,0, pclath, cstack
  2865 ;; Tracked objects:
  2866 ;;		On entry : 0/0
  2867 ;;		On exit  : 0/0
  2868 ;;		Unchanged: 0/0
  2869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2870 ;;      Params:         0       0       0       0       0
  2871 ;;      Locals:         0       0       0       0       0
  2872 ;;      Temps:          0       0       0       0       0
  2873 ;;      Totals:         0       0       0       0       0
  2874 ;;Total ram usage:        0 bytes
  2875 ;; Hardware stack levels used: 1
  2876 ;; Hardware stack levels required when called: 2
  2877 ;; This function calls:
  2878 ;;		_Lcd_Cmd
  2879 ;; This function is called by:
  2880 ;;		_mover
  2881 ;; This function uses a non-reentrant model
  2882 ;;
  2883                           
  2884  0F79                     _Lcd_Shift_Left:	
  2885                           ;psect for function _Lcd_Shift_Left
  2886                           
  2887  0F79                     l1391:	
  2888                           ;incstack = 0
  2889                           ; Regs used in _Lcd_Shift_Left: [wreg+status,2+status,0+pclath+cstack]
  2890                           
  2891                           
  2892                           ;lcd.c: 113:  Lcd_Cmd(0x01);
  2893  0F79  3001               	movlw	1
  2894  0F7A  120A  158A  279F  120A  158A  	fcall	_Lcd_Cmd
  2895                           
  2896                           ;lcd.c: 114:  Lcd_Cmd(0x08);
  2897  0F7F  3008               	movlw	8
  2898  0F80  120A  158A  279F  120A  158A  	fcall	_Lcd_Cmd
  2899  0F85                     l166:
  2900  0F85  0008               	return
  2901  0F86                     __end_of_Lcd_Shift_Left:
  2902                           
  2903                           	psect	text9
  2904  00A5                     __ptext9:	
  2905 ;; *************** function _inicio *****************
  2906 ;; Defined at:
  2907 ;;		line 83 in file "main.c"
  2908 ;; Parameters:    Size  Location     Type
  2909 ;;		None
  2910 ;; Auto vars:     Size  Location     Type
  2911 ;;		None
  2912 ;; Return value:  Size  Location     Type
  2913 ;;                  1    wreg      void 
  2914 ;; Registers used:
  2915 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2916 ;; Tracked objects:
  2917 ;;		On entry : 0/0
  2918 ;;		On exit  : 0/0
  2919 ;;		Unchanged: 0/0
  2920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2921 ;;      Params:         0       0       0       0       0
  2922 ;;      Locals:         0       0       0       0       0
  2923 ;;      Temps:          1       0       0       0       0
  2924 ;;      Totals:         1       0       0       0       0
  2925 ;;Total ram usage:        1 bytes
  2926 ;; Hardware stack levels used: 1
  2927 ;; Hardware stack levels required when called: 3
  2928 ;; This function calls:
  2929 ;;		_Lcd_Clear
  2930 ;;		_Lcd_Set_Cursor
  2931 ;;		_Lcd_Write_String
  2932 ;; This function is called by:
  2933 ;;		_main
  2934 ;; This function uses a non-reentrant model
  2935 ;;
  2936                           
  2937  00A5                     _inicio:	
  2938                           ;psect for function _inicio
  2939                           
  2940  00A5                     l1517:	
  2941                           ;incstack = 0
  2942                           ; Regs used in _inicio: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2943                           
  2944                           
  2945                           ;main.c: 85:  Lcd_Clear();
  2946  00A5  120A  158A  276C  120A  118A  	fcall	_Lcd_Clear
  2947                           
  2948                           ;main.c: 86:  Lcd_Set_Cursor(1,2);
  2949  00AA  3002               	movlw	2
  2950  00AB  00FB               	movwf	??_inicio
  2951  00AC  087B               	movf	??_inicio,w
  2952  00AD  00F4               	movwf	Lcd_Set_Cursor@b
  2953  00AE  3001               	movlw	1
  2954  00AF  120A  118A  223F  120A  118A  	fcall	_Lcd_Set_Cursor
  2955  00B4                     l1519:
  2956                           
  2957                           ;main.c: 87:  Lcd_Write_String("INGRESAR CLAVE:");
  2958  00B4  3032               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  2959  00B5  00F5               	movwf	Lcd_Write_String@a
  2960  00B6  3080               	movlw	128
  2961  00B7  00F6               	movwf	Lcd_Write_String@a+1
  2962  00B8  120A  118A  20D1  120A  118A  	fcall	_Lcd_Write_String
  2963  00BD                     l1521:
  2964                           
  2965                           ;main.c: 88:  Lcd_Set_Cursor(2,8);
  2966  00BD  3008               	movlw	8
  2967  00BE  00FB               	movwf	??_inicio
  2968  00BF  087B               	movf	??_inicio,w
  2969  00C0  00F4               	movwf	Lcd_Set_Cursor@b
  2970  00C1  3002               	movlw	2
  2971  00C2  120A  118A  223F  120A  118A  	fcall	_Lcd_Set_Cursor
  2972                           
  2973                           ;main.c: 89:  Lcd_Write_String("____");
  2974  00C7  3077               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  2975  00C8  00F5               	movwf	Lcd_Write_String@a
  2976  00C9  3080               	movlw	128
  2977  00CA  00F6               	movwf	Lcd_Write_String@a+1
  2978  00CB  120A  118A  20D1  120A  118A  	fcall	_Lcd_Write_String
  2979  00D0                     l87:
  2980  00D0  0008               	return
  2981  00D1                     __end_of_inicio:
  2982                           
  2983                           	psect	text10
  2984  0094                     __ptext10:	
  2985 ;; *************** function _encender_ledVerde *****************
  2986 ;; Defined at:
  2987 ;;		line 24 in file "main.c"
  2988 ;; Parameters:    Size  Location     Type
  2989 ;;		None
  2990 ;; Auto vars:     Size  Location     Type
  2991 ;;		None
  2992 ;; Return value:  Size  Location     Type
  2993 ;;                  1    wreg      void 
  2994 ;; Registers used:
  2995 ;;		None
  2996 ;; Tracked objects:
  2997 ;;		On entry : 0/0
  2998 ;;		On exit  : 0/0
  2999 ;;		Unchanged: 0/0
  3000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3001 ;;      Params:         0       0       0       0       0
  3002 ;;      Locals:         0       0       0       0       0
  3003 ;;      Temps:          0       0       0       0       0
  3004 ;;      Totals:         0       0       0       0       0
  3005 ;;Total ram usage:        0 bytes
  3006 ;; Hardware stack levels used: 1
  3007 ;; This function calls:
  3008 ;;		Nothing
  3009 ;; This function is called by:
  3010 ;;		_main
  3011 ;; This function uses a non-reentrant model
  3012 ;;
  3013                           
  3014  0094                     _encender_ledVerde:	
  3015                           ;psect for function _encender_ledVerde
  3016                           
  3017  0094                     l1445:	
  3018                           ;incstack = 0
  3019                           ; Regs used in _encender_ledVerde: []
  3020                           
  3021                           
  3022                           ;main.c: 25:     RC0 = 1;
  3023  0094  1283               	bcf	3,5	;RP0=0, select bank0
  3024  0095  1303               	bcf	3,6	;RP1=0, select bank0
  3025  0096  1407               	bsf	7,0	;volatile
  3026  0097                     l57:
  3027  0097  0008               	return
  3028  0098                     __end_of_encender_ledVerde:
  3029                           
  3030                           	psect	text11
  3031  0F60                     __ptext11:	
  3032 ;; *************** function _encender_ledRojo *****************
  3033 ;; Defined at:
  3034 ;;		line 30 in file "main.c"
  3035 ;; Parameters:    Size  Location     Type
  3036 ;;		None
  3037 ;; Auto vars:     Size  Location     Type
  3038 ;;		None
  3039 ;; Return value:  Size  Location     Type
  3040 ;;                  1    wreg      void 
  3041 ;; Registers used:
  3042 ;;		None
  3043 ;; Tracked objects:
  3044 ;;		On entry : 0/0
  3045 ;;		On exit  : 0/0
  3046 ;;		Unchanged: 0/0
  3047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3048 ;;      Params:         0       0       0       0       0
  3049 ;;      Locals:         0       0       0       0       0
  3050 ;;      Temps:          0       0       0       0       0
  3051 ;;      Totals:         0       0       0       0       0
  3052 ;;Total ram usage:        0 bytes
  3053 ;; Hardware stack levels used: 1
  3054 ;; This function calls:
  3055 ;;		Nothing
  3056 ;; This function is called by:
  3057 ;;		_main
  3058 ;; This function uses a non-reentrant model
  3059 ;;
  3060                           
  3061  0F60                     _encender_ledRojo:	
  3062                           ;psect for function _encender_ledRojo
  3063                           
  3064  0F60                     l1447:	
  3065                           ;incstack = 0
  3066                           ; Regs used in _encender_ledRojo: []
  3067                           
  3068                           
  3069                           ;main.c: 31:     RC1 = 1;
  3070  0F60  1283               	bcf	3,5	;RP0=0, select bank0
  3071  0F61  1303               	bcf	3,6	;RP1=0, select bank0
  3072  0F62  1487               	bsf	7,1	;volatile
  3073  0F63                     l63:
  3074  0F63  0008               	return
  3075  0F64                     __end_of_encender_ledRojo:
  3076                           
  3077                           	psect	text12
  3078  0F5C                     __ptext12:	
  3079 ;; *************** function _apagar_ledRojo *****************
  3080 ;; Defined at:
  3081 ;;		line 33 in file "main.c"
  3082 ;; Parameters:    Size  Location     Type
  3083 ;;		None
  3084 ;; Auto vars:     Size  Location     Type
  3085 ;;		None
  3086 ;; Return value:  Size  Location     Type
  3087 ;;                  1    wreg      void 
  3088 ;; Registers used:
  3089 ;;		None
  3090 ;; Tracked objects:
  3091 ;;		On entry : 0/0
  3092 ;;		On exit  : 0/0
  3093 ;;		Unchanged: 0/0
  3094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3095 ;;      Params:         0       0       0       0       0
  3096 ;;      Locals:         0       0       0       0       0
  3097 ;;      Temps:          0       0       0       0       0
  3098 ;;      Totals:         0       0       0       0       0
  3099 ;;Total ram usage:        0 bytes
  3100 ;; Hardware stack levels used: 1
  3101 ;; This function calls:
  3102 ;;		Nothing
  3103 ;; This function is called by:
  3104 ;;		_main
  3105 ;; This function uses a non-reentrant model
  3106 ;;
  3107                           
  3108  0F5C                     _apagar_ledRojo:	
  3109                           ;psect for function _apagar_ledRojo
  3110                           
  3111  0F5C                     l1449:	
  3112                           ;incstack = 0
  3113                           ; Regs used in _apagar_ledRojo: []
  3114                           
  3115                           
  3116                           ;main.c: 34:     RC1 = 0;
  3117  0F5C  1283               	bcf	3,5	;RP0=0, select bank0
  3118  0F5D  1303               	bcf	3,6	;RP1=0, select bank0
  3119  0F5E  1087               	bcf	7,1	;volatile
  3120  0F5F                     l66:
  3121  0F5F  0008               	return
  3122  0F60                     __end_of_apagar_ledRojo:
  3123                           
  3124                           	psect	text13
  3125  0FDB                     __ptext13:	
  3126 ;; *************** function ___wmul *****************
  3127 ;; Defined at:
  3128 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\Umul16.c"
  3129 ;; Parameters:    Size  Location     Type
  3130 ;;  multiplier      2    0[COMMON] unsigned int 
  3131 ;;  multiplicand    2    2[COMMON] unsigned int 
  3132 ;; Auto vars:     Size  Location     Type
  3133 ;;  product         2    4[COMMON] unsigned int 
  3134 ;; Return value:  Size  Location     Type
  3135 ;;                  2    0[COMMON] unsigned int 
  3136 ;; Registers used:
  3137 ;;		wreg, status,2, status,0
  3138 ;; Tracked objects:
  3139 ;;		On entry : 0/0
  3140 ;;		On exit  : 0/0
  3141 ;;		Unchanged: 0/0
  3142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3143 ;;      Params:         4       0       0       0       0
  3144 ;;      Locals:         2       0       0       0       0
  3145 ;;      Temps:          0       0       0       0       0
  3146 ;;      Totals:         6       0       0       0       0
  3147 ;;Total ram usage:        6 bytes
  3148 ;; Hardware stack levels used: 1
  3149 ;; This function calls:
  3150 ;;		Nothing
  3151 ;; This function is called by:
  3152 ;;		_main
  3153 ;; This function uses a non-reentrant model
  3154 ;;
  3155                           
  3156  0FDB                     ___wmul:	
  3157                           ;psect for function ___wmul
  3158                           
  3159  0FDB                     l1631:	
  3160                           ;incstack = 0
  3161                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3162                           
  3163  0FDB  01F4               	clrf	___wmul@product
  3164  0FDC  01F5               	clrf	___wmul@product+1
  3165  0FDD                     l1633:
  3166  0FDD  1C70               	btfss	___wmul@multiplier,0
  3167  0FDE  2FE0               	goto	u1081
  3168  0FDF  2FE1               	goto	u1080
  3169  0FE0                     u1081:
  3170  0FE0  2FE7               	goto	l315
  3171  0FE1                     u1080:
  3172  0FE1                     l1635:
  3173  0FE1  0872               	movf	___wmul@multiplicand,w
  3174  0FE2  07F4               	addwf	___wmul@product,f
  3175  0FE3  1803               	skipnc
  3176  0FE4  0AF5               	incf	___wmul@product+1,f
  3177  0FE5  0873               	movf	___wmul@multiplicand+1,w
  3178  0FE6  07F5               	addwf	___wmul@product+1,f
  3179  0FE7                     l315:
  3180  0FE7  3001               	movlw	1
  3181  0FE8                     u1095:
  3182  0FE8  1003               	clrc
  3183  0FE9  0DF2               	rlf	___wmul@multiplicand,f
  3184  0FEA  0DF3               	rlf	___wmul@multiplicand+1,f
  3185  0FEB  3EFF               	addlw	-1
  3186  0FEC  1D03               	skipz
  3187  0FED  2FE8               	goto	u1095
  3188  0FEE                     l1637:
  3189  0FEE  3001               	movlw	1
  3190  0FEF                     u1105:
  3191  0FEF  1003               	clrc
  3192  0FF0  0CF1               	rrf	___wmul@multiplier+1,f
  3193  0FF1  0CF0               	rrf	___wmul@multiplier,f
  3194  0FF2  3EFF               	addlw	-1
  3195  0FF3  1D03               	skipz
  3196  0FF4  2FEF               	goto	u1105
  3197  0FF5                     l1639:
  3198  0FF5  0870               	movf	___wmul@multiplier,w
  3199  0FF6  0471               	iorwf	___wmul@multiplier+1,w
  3200  0FF7  1D03               	btfss	3,2
  3201  0FF8  2FFA               	goto	u1111
  3202  0FF9  2FFB               	goto	u1110
  3203  0FFA                     u1111:
  3204  0FFA  2FDD               	goto	l1633
  3205  0FFB                     u1110:
  3206  0FFB                     l1641:
  3207  0FFB  0875               	movf	___wmul@product+1,w
  3208  0FFC  00F1               	movwf	?___wmul+1
  3209  0FFD  0874               	movf	___wmul@product,w
  3210  0FFE  00F0               	movwf	?___wmul
  3211  0FFF                     l317:
  3212  0FFF  0008               	return
  3213  1000                     __end_of___wmul:
  3214                           
  3215                           	psect	text14
  3216  0340                     __ptext14:	
  3217 ;; *************** function _Leer_tecla *****************
  3218 ;; Defined at:
  3219 ;;		line 13 in file "teclado.c"
  3220 ;; Parameters:    Size  Location     Type
  3221 ;;		None
  3222 ;; Auto vars:     Size  Location     Type
  3223 ;;		None
  3224 ;; Return value:  Size  Location     Type
  3225 ;;                  1    wreg      unsigned char 
  3226 ;; Registers used:
  3227 ;;		wreg, status,2
  3228 ;; Tracked objects:
  3229 ;;		On entry : 0/0
  3230 ;;		On exit  : 0/0
  3231 ;;		Unchanged: 0/0
  3232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3233 ;;      Params:         0       0       0       0       0
  3234 ;;      Locals:         0       0       0       0       0
  3235 ;;      Temps:          2       0       0       0       0
  3236 ;;      Totals:         2       0       0       0       0
  3237 ;;Total ram usage:        2 bytes
  3238 ;; Hardware stack levels used: 1
  3239 ;; This function calls:
  3240 ;;		Nothing
  3241 ;; This function is called by:
  3242 ;;		_main
  3243 ;; This function uses a non-reentrant model
  3244 ;;
  3245                           
  3246  0340                     _Leer_tecla:	
  3247                           ;psect for function _Leer_tecla
  3248                           
  3249  0340                     l1533:	
  3250                           ;incstack = 0
  3251                           ; Regs used in _Leer_tecla: [wreg+status,2]
  3252                           
  3253                           
  3254                           ;teclado.c: 15:     x=100;
  3255  0340  3064               	movlw	100
  3256  0341  1283               	bcf	3,5	;RP0=0, select bank0
  3257  0342  1303               	bcf	3,6	;RP1=0, select bank0
  3258  0343  00C9               	movwf	_x
  3259  0344  3000               	movlw	0
  3260  0345  00CA               	movwf	_x+1
  3261                           
  3262                           ;teclado.c: 17:       PORTB=1;
  3263  0346  3001               	movlw	1
  3264  0347  0086               	movwf	6	;volatile
  3265                           
  3266                           ;teclado.c: 18:       _delay((unsigned long)((10)*(4000000/4000.0)));
  3267  0348  300D               	movlw	13
  3268  0349  00F1               	movwf	??_Leer_tecla+1
  3269  034A  30FB               	movlw	251
  3270  034B  00F0               	movwf	??_Leer_tecla
  3271  034C                     u1387:
  3272  034C  0BF0               	decfsz	??_Leer_tecla,f
  3273  034D  2B4C               	goto	u1387
  3274  034E  0BF1               	decfsz	??_Leer_tecla+1,f
  3275  034F  2B4C               	goto	u1387
  3276  0350  2B51               	nop2
  3277  0351                     l1535:
  3278                           
  3279                           ;teclado.c: 21:       if (RB4) {
  3280  0351  1283               	bcf	3,5	;RP0=0, select bank0
  3281  0352  1303               	bcf	3,6	;RP1=0, select bank0
  3282  0353  1E06               	btfss	6,4	;volatile
  3283  0354  2B56               	goto	u891
  3284  0355  2B57               	goto	u890
  3285  0356                     u891:
  3286  0356  2B5C               	goto	l181
  3287  0357                     u890:
  3288  0357                     l1537:
  3289                           
  3290                           ;teclado.c: 22:           x = 1;
  3291  0357  3001               	movlw	1
  3292  0358  00C9               	movwf	_x
  3293  0359  3000               	movlw	0
  3294  035A  00CA               	movwf	_x+1
  3295                           
  3296                           ;teclado.c: 23:       }
  3297  035B  2B6D               	goto	l182
  3298  035C                     l181:	
  3299                           ;teclado.c: 24:       else if (RB5) {
  3300                           
  3301  035C  1E86               	btfss	6,5	;volatile
  3302  035D  2B5F               	goto	u901
  3303  035E  2B60               	goto	u900
  3304  035F                     u901:
  3305  035F  2B65               	goto	l183
  3306  0360                     u900:
  3307  0360                     l1539:
  3308                           
  3309                           ;teclado.c: 25:           x = 2;
  3310  0360  3002               	movlw	2
  3311  0361  00C9               	movwf	_x
  3312  0362  3000               	movlw	0
  3313  0363  00CA               	movwf	_x+1
  3314                           
  3315                           ;teclado.c: 26:       }
  3316  0364  2B6D               	goto	l182
  3317  0365                     l183:	
  3318                           ;teclado.c: 27:       else if (RB6) {
  3319                           
  3320  0365  1F06               	btfss	6,6	;volatile
  3321  0366  2B68               	goto	u911
  3322  0367  2B69               	goto	u910
  3323  0368                     u911:
  3324  0368  2B6D               	goto	l182
  3325  0369                     u910:
  3326  0369                     l1541:
  3327                           
  3328                           ;teclado.c: 28:           x = 3;
  3329  0369  3003               	movlw	3
  3330  036A  00C9               	movwf	_x
  3331  036B  3000               	movlw	0
  3332  036C  00CA               	movwf	_x+1
  3333  036D                     l182:
  3334                           
  3335                           ;teclado.c: 30:       PORTB=2;
  3336  036D  3002               	movlw	2
  3337  036E  0086               	movwf	6	;volatile
  3338                           
  3339                           ;teclado.c: 31:       _delay((unsigned long)((10)*(4000000/4000.0)));
  3340  036F  300D               	movlw	13
  3341  0370  00F1               	movwf	??_Leer_tecla+1
  3342  0371  30FB               	movlw	251
  3343  0372  00F0               	movwf	??_Leer_tecla
  3344  0373                     u1397:
  3345  0373  0BF0               	decfsz	??_Leer_tecla,f
  3346  0374  2B73               	goto	u1397
  3347  0375  0BF1               	decfsz	??_Leer_tecla+1,f
  3348  0376  2B73               	goto	u1397
  3349  0377  2B78               	nop2
  3350  0378                     l1543:
  3351                           
  3352                           ;teclado.c: 32:       if (RB4) {
  3353  0378  1283               	bcf	3,5	;RP0=0, select bank0
  3354  0379  1303               	bcf	3,6	;RP1=0, select bank0
  3355  037A  1E06               	btfss	6,4	;volatile
  3356  037B  2B7D               	goto	u921
  3357  037C  2B7E               	goto	u920
  3358  037D                     u921:
  3359  037D  2B83               	goto	l186
  3360  037E                     u920:
  3361  037E                     l1545:
  3362                           
  3363                           ;teclado.c: 33:           x = 4;
  3364  037E  3004               	movlw	4
  3365  037F  00C9               	movwf	_x
  3366  0380  3000               	movlw	0
  3367  0381  00CA               	movwf	_x+1
  3368                           
  3369                           ;teclado.c: 34:       }
  3370  0382  2B94               	goto	l187
  3371  0383                     l186:	
  3372                           ;teclado.c: 35:       else if (RB5) {
  3373                           
  3374  0383  1E86               	btfss	6,5	;volatile
  3375  0384  2B86               	goto	u931
  3376  0385  2B87               	goto	u930
  3377  0386                     u931:
  3378  0386  2B8C               	goto	l188
  3379  0387                     u930:
  3380  0387                     l1547:
  3381                           
  3382                           ;teclado.c: 36:           x = 5;
  3383  0387  3005               	movlw	5
  3384  0388  00C9               	movwf	_x
  3385  0389  3000               	movlw	0
  3386  038A  00CA               	movwf	_x+1
  3387                           
  3388                           ;teclado.c: 37:       }
  3389  038B  2B94               	goto	l187
  3390  038C                     l188:	
  3391                           ;teclado.c: 38:       else if (RB6) {
  3392                           
  3393  038C  1F06               	btfss	6,6	;volatile
  3394  038D  2B8F               	goto	u941
  3395  038E  2B90               	goto	u940
  3396  038F                     u941:
  3397  038F  2B94               	goto	l187
  3398  0390                     u940:
  3399  0390                     l1549:
  3400                           
  3401                           ;teclado.c: 39:           x = 6;
  3402  0390  3006               	movlw	6
  3403  0391  00C9               	movwf	_x
  3404  0392  3000               	movlw	0
  3405  0393  00CA               	movwf	_x+1
  3406  0394                     l187:
  3407                           
  3408                           ;teclado.c: 41:       PORTB=4;
  3409  0394  3004               	movlw	4
  3410  0395  0086               	movwf	6	;volatile
  3411                           
  3412                           ;teclado.c: 42:       _delay((unsigned long)((10)*(4000000/4000.0)));
  3413  0396  300D               	movlw	13
  3414  0397  00F1               	movwf	??_Leer_tecla+1
  3415  0398  30FB               	movlw	251
  3416  0399  00F0               	movwf	??_Leer_tecla
  3417  039A                     u1407:
  3418  039A  0BF0               	decfsz	??_Leer_tecla,f
  3419  039B  2B9A               	goto	u1407
  3420  039C  0BF1               	decfsz	??_Leer_tecla+1,f
  3421  039D  2B9A               	goto	u1407
  3422  039E  2B9F               	nop2
  3423  039F                     l1551:
  3424                           
  3425                           ;teclado.c: 43:       if (RB4) {
  3426  039F  1283               	bcf	3,5	;RP0=0, select bank0
  3427  03A0  1303               	bcf	3,6	;RP1=0, select bank0
  3428  03A1  1E06               	btfss	6,4	;volatile
  3429  03A2  2BA4               	goto	u951
  3430  03A3  2BA5               	goto	u950
  3431  03A4                     u951:
  3432  03A4  2BAA               	goto	l191
  3433  03A5                     u950:
  3434  03A5                     l1553:
  3435                           
  3436                           ;teclado.c: 44:           x = 7;
  3437  03A5  3007               	movlw	7
  3438  03A6  00C9               	movwf	_x
  3439  03A7  3000               	movlw	0
  3440  03A8  00CA               	movwf	_x+1
  3441                           
  3442                           ;teclado.c: 45:       }
  3443  03A9  2BBB               	goto	l192
  3444  03AA                     l191:	
  3445                           ;teclado.c: 46:       else if (RB5) {
  3446                           
  3447  03AA  1E86               	btfss	6,5	;volatile
  3448  03AB  2BAD               	goto	u961
  3449  03AC  2BAE               	goto	u960
  3450  03AD                     u961:
  3451  03AD  2BB3               	goto	l193
  3452  03AE                     u960:
  3453  03AE                     l1555:
  3454                           
  3455                           ;teclado.c: 47:           x = 8;
  3456  03AE  3008               	movlw	8
  3457  03AF  00C9               	movwf	_x
  3458  03B0  3000               	movlw	0
  3459  03B1  00CA               	movwf	_x+1
  3460                           
  3461                           ;teclado.c: 48:       }
  3462  03B2  2BBB               	goto	l192
  3463  03B3                     l193:	
  3464                           ;teclado.c: 49:       else if (RB6) {
  3465                           
  3466  03B3  1F06               	btfss	6,6	;volatile
  3467  03B4  2BB6               	goto	u971
  3468  03B5  2BB7               	goto	u970
  3469  03B6                     u971:
  3470  03B6  2BBB               	goto	l192
  3471  03B7                     u970:
  3472  03B7                     l1557:
  3473                           
  3474                           ;teclado.c: 50:           x = 9;
  3475  03B7  3009               	movlw	9
  3476  03B8  00C9               	movwf	_x
  3477  03B9  3000               	movlw	0
  3478  03BA  00CA               	movwf	_x+1
  3479  03BB                     l192:
  3480                           
  3481                           ;teclado.c: 52:       PORTB=8;
  3482  03BB  3008               	movlw	8
  3483  03BC  0086               	movwf	6	;volatile
  3484                           
  3485                           ;teclado.c: 53:       _delay((unsigned long)((10)*(4000000/4000.0)));
  3486  03BD  300D               	movlw	13
  3487  03BE  00F1               	movwf	??_Leer_tecla+1
  3488  03BF  30FB               	movlw	251
  3489  03C0  00F0               	movwf	??_Leer_tecla
  3490  03C1                     u1417:
  3491  03C1  0BF0               	decfsz	??_Leer_tecla,f
  3492  03C2  2BC1               	goto	u1417
  3493  03C3  0BF1               	decfsz	??_Leer_tecla+1,f
  3494  03C4  2BC1               	goto	u1417
  3495  03C5  2BC6               	nop2
  3496  03C6                     l1559:
  3497                           
  3498                           ;teclado.c: 54:       if (RB4) {
  3499  03C6  1283               	bcf	3,5	;RP0=0, select bank0
  3500  03C7  1303               	bcf	3,6	;RP1=0, select bank0
  3501  03C8  1E06               	btfss	6,4	;volatile
  3502  03C9  2BCB               	goto	u981
  3503  03CA  2BCC               	goto	u980
  3504  03CB                     u981:
  3505  03CB  2BD1               	goto	l196
  3506  03CC                     u980:
  3507  03CC                     l1561:
  3508                           
  3509                           ;teclado.c: 55:           x = 42;
  3510  03CC  302A               	movlw	42
  3511  03CD  00C9               	movwf	_x
  3512  03CE  3000               	movlw	0
  3513  03CF  00CA               	movwf	_x+1
  3514                           
  3515                           ;teclado.c: 56:       }
  3516  03D0  2BE0               	goto	l197
  3517  03D1                     l196:	
  3518                           ;teclado.c: 57:       else if (RB5) {
  3519                           
  3520  03D1  1E86               	btfss	6,5	;volatile
  3521  03D2  2BD4               	goto	u991
  3522  03D3  2BD5               	goto	u990
  3523  03D4                     u991:
  3524  03D4  2BD8               	goto	l198
  3525  03D5                     u990:
  3526  03D5                     l1563:
  3527                           
  3528                           ;teclado.c: 58:           x = 0;
  3529  03D5  01C9               	clrf	_x
  3530  03D6  01CA               	clrf	_x+1
  3531                           
  3532                           ;teclado.c: 59:       }
  3533  03D7  2BE0               	goto	l197
  3534  03D8                     l198:	
  3535                           ;teclado.c: 60:       else if (RB6) {
  3536                           
  3537  03D8  1F06               	btfss	6,6	;volatile
  3538  03D9  2BDB               	goto	u1001
  3539  03DA  2BDC               	goto	u1000
  3540  03DB                     u1001:
  3541  03DB  2BE0               	goto	l197
  3542  03DC                     u1000:
  3543  03DC                     l1565:
  3544                           
  3545                           ;teclado.c: 61:           x = 35;
  3546  03DC  3023               	movlw	35
  3547  03DD  00C9               	movwf	_x
  3548  03DE  3000               	movlw	0
  3549  03DF  00CA               	movwf	_x+1
  3550  03E0                     l197:
  3551                           
  3552                           ;teclado.c: 63:     return x;
  3553  03E0  0849               	movf	_x,w
  3554  03E1                     l201:
  3555  03E1  0008               	return
  3556  03E2                     __end_of_Leer_tecla:
  3557                           
  3558                           	psect	text15
  3559  02E3                     __ptext15:	
  3560 ;; *************** function _Lcd_Init *****************
  3561 ;; Defined at:
  3562 ;;		line 63 in file "lcd.c"
  3563 ;; Parameters:    Size  Location     Type
  3564 ;;		None
  3565 ;; Auto vars:     Size  Location     Type
  3566 ;;		None
  3567 ;; Return value:  Size  Location     Type
  3568 ;;                  1    wreg      void 
  3569 ;; Registers used:
  3570 ;;		wreg, status,2, status,0, pclath, cstack
  3571 ;; Tracked objects:
  3572 ;;		On entry : 0/0
  3573 ;;		On exit  : 0/0
  3574 ;;		Unchanged: 0/0
  3575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3576 ;;      Params:         0       0       0       0       0
  3577 ;;      Locals:         0       0       0       0       0
  3578 ;;      Temps:          2       0       0       0       0
  3579 ;;      Totals:         2       0       0       0       0
  3580 ;;Total ram usage:        2 bytes
  3581 ;; Hardware stack levels used: 1
  3582 ;; Hardware stack levels required when called: 2
  3583 ;; This function calls:
  3584 ;;		_Lcd_Cmd
  3585 ;;		_Lcd_Port
  3586 ;; This function is called by:
  3587 ;;		_main
  3588 ;; This function uses a non-reentrant model
  3589 ;;
  3590                           
  3591  02E3                     _Lcd_Init:	
  3592                           ;psect for function _Lcd_Init
  3593                           
  3594  02E3                     l1523:	
  3595                           ;incstack = 0
  3596                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  3597                           
  3598                           
  3599                           ;lcd.c: 65:   Lcd_Port(0x00);
  3600  02E3  3000               	movlw	0
  3601  02E4  120A  158A  27B9  120A  118A  	fcall	_Lcd_Port
  3602  02E9                     l1525:
  3603                           
  3604                           ;lcd.c: 66:    _delay((unsigned long)((20)*(4000000/4000.0)));
  3605  02E9  301A               	movlw	26
  3606  02EA  00F5               	movwf	??_Lcd_Init+1
  3607  02EB  30F8               	movlw	248
  3608  02EC  00F4               	movwf	??_Lcd_Init
  3609  02ED                     u1427:
  3610  02ED  0BF4               	decfsz	??_Lcd_Init,f
  3611  02EE  2AED               	goto	u1427
  3612  02EF  0BF5               	decfsz	??_Lcd_Init+1,f
  3613  02F0  2AED               	goto	u1427
  3614  02F1  0000               	nop
  3615  02F2                     l1527:
  3616                           
  3617                           ;lcd.c: 67:   Lcd_Cmd(0x03);
  3618  02F2  3003               	movlw	3
  3619  02F3  120A  158A  279F  120A  118A  	fcall	_Lcd_Cmd
  3620                           
  3621                           ;lcd.c: 68:  _delay((unsigned long)((5)*(4000000/4000.0)));
  3622  02F8  3007               	movlw	7
  3623  02F9  00F5               	movwf	??_Lcd_Init+1
  3624  02FA  307D               	movlw	125
  3625  02FB  00F4               	movwf	??_Lcd_Init
  3626  02FC                     u1437:
  3627  02FC  0BF4               	decfsz	??_Lcd_Init,f
  3628  02FD  2AFC               	goto	u1437
  3629  02FE  0BF5               	decfsz	??_Lcd_Init+1,f
  3630  02FF  2AFC               	goto	u1437
  3631  0300                     l1529:
  3632                           
  3633                           ;lcd.c: 69:   Lcd_Cmd(0x03);
  3634  0300  3003               	movlw	3
  3635  0301  120A  158A  279F  120A  118A  	fcall	_Lcd_Cmd
  3636  0306                     l1531:
  3637                           
  3638                           ;lcd.c: 70:  _delay((unsigned long)((11)*(4000000/4000.0)));
  3639  0306  300F               	movlw	15
  3640  0307  00F5               	movwf	??_Lcd_Init+1
  3641  0308  3047               	movlw	71
  3642  0309  00F4               	movwf	??_Lcd_Init
  3643  030A                     u1447:
  3644  030A  0BF4               	decfsz	??_Lcd_Init,f
  3645  030B  2B0A               	goto	u1447
  3646  030C  0BF5               	decfsz	??_Lcd_Init+1,f
  3647  030D  2B0A               	goto	u1447
  3648  030E  2B0F               	nop2
  3649                           
  3650                           ;lcd.c: 71:   Lcd_Cmd(0x03);
  3651  030F  3003               	movlw	3
  3652  0310  120A  158A  279F  120A  118A  	fcall	_Lcd_Cmd
  3653                           
  3654                           ;lcd.c: 73:   Lcd_Cmd(0x02);
  3655  0315  3002               	movlw	2
  3656  0316  120A  158A  279F  120A  118A  	fcall	_Lcd_Cmd
  3657                           
  3658                           ;lcd.c: 74:   Lcd_Cmd(0x02);
  3659  031B  3002               	movlw	2
  3660  031C  120A  158A  279F  120A  118A  	fcall	_Lcd_Cmd
  3661                           
  3662                           ;lcd.c: 75:   Lcd_Cmd(0x08);
  3663  0321  3008               	movlw	8
  3664  0322  120A  158A  279F  120A  118A  	fcall	_Lcd_Cmd
  3665                           
  3666                           ;lcd.c: 76:   Lcd_Cmd(0x00);
  3667  0327  3000               	movlw	0
  3668  0328  120A  158A  279F  120A  118A  	fcall	_Lcd_Cmd
  3669                           
  3670                           ;lcd.c: 77:   Lcd_Cmd(0x0C);
  3671  032D  300C               	movlw	12
  3672  032E  120A  158A  279F  120A  118A  	fcall	_Lcd_Cmd
  3673                           
  3674                           ;lcd.c: 78:   Lcd_Cmd(0x00);
  3675  0333  3000               	movlw	0
  3676  0334  120A  158A  279F  120A  118A  	fcall	_Lcd_Cmd
  3677                           
  3678                           ;lcd.c: 79:   Lcd_Cmd(0x06);
  3679  0339  3006               	movlw	6
  3680  033A  120A  158A  279F  120A  118A  	fcall	_Lcd_Cmd
  3681  033F                     l151:
  3682  033F  0008               	return
  3683  0340                     __end_of_Lcd_Init:
  3684                           
  3685                           	psect	text16
  3686  0291                     __ptext16:	
  3687 ;; *************** function _Alarma *****************
  3688 ;; Defined at:
  3689 ;;		line 66 in file "main.c"
  3690 ;; Parameters:    Size  Location     Type
  3691 ;;		None
  3692 ;; Auto vars:     Size  Location     Type
  3693 ;;  a               2    0[BANK0 ] int 
  3694 ;; Return value:  Size  Location     Type
  3695 ;;                  1    wreg      void 
  3696 ;; Registers used:
  3697 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3698 ;; Tracked objects:
  3699 ;;		On entry : 0/0
  3700 ;;		On exit  : 0/0
  3701 ;;		Unchanged: 0/0
  3702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3703 ;;      Params:         0       0       0       0       0
  3704 ;;      Locals:         0       2       0       0       0
  3705 ;;      Temps:          3       0       0       0       0
  3706 ;;      Totals:         3       2       0       0       0
  3707 ;;Total ram usage:        5 bytes
  3708 ;; Hardware stack levels used: 1
  3709 ;; Hardware stack levels required when called: 3
  3710 ;; This function calls:
  3711 ;;		_Lcd_Clear
  3712 ;;		_Lcd_Set_Cursor
  3713 ;;		_Lcd_Write_String
  3714 ;; This function is called by:
  3715 ;;		_main
  3716 ;; This function uses a non-reentrant model
  3717 ;;
  3718                           
  3719  0291                     _Alarma:	
  3720                           ;psect for function _Alarma
  3721                           
  3722  0291                     l1495:	
  3723                           ;incstack = 0
  3724                           ; Regs used in _Alarma: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3725                           
  3726                           
  3727                           ;main.c: 68:     for(int a=0; a<=4 ; a++){
  3728  0291  1283               	bcf	3,5	;RP0=0, select bank0
  3729  0292  1303               	bcf	3,6	;RP1=0, select bank0
  3730  0293  01A0               	clrf	Alarma@a
  3731  0294  01A1               	clrf	Alarma@a+1
  3732  0295                     l1501:
  3733                           
  3734                           ;main.c: 70:         Lcd_Clear();
  3735  0295  120A  158A  276C  120A  118A  	fcall	_Lcd_Clear
  3736                           
  3737                           ;main.c: 71:         Lcd_Set_Cursor(1,2);
  3738  029A  3002               	movlw	2
  3739  029B  00FB               	movwf	??_Alarma
  3740  029C  087B               	movf	??_Alarma,w
  3741  029D  00F4               	movwf	Lcd_Set_Cursor@b
  3742  029E  3001               	movlw	1
  3743  029F  120A  118A  223F  120A  118A  	fcall	_Lcd_Set_Cursor
  3744  02A4                     l1503:
  3745                           
  3746                           ;main.c: 72:         Lcd_Write_String("Caja Bloqueada");
  3747  02A4  3042               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  3748  02A5  00F5               	movwf	Lcd_Write_String@a
  3749  02A6  3080               	movlw	128
  3750  02A7  00F6               	movwf	Lcd_Write_String@a+1
  3751  02A8  120A  118A  20D1  120A  118A  	fcall	_Lcd_Write_String
  3752  02AD                     l1505:
  3753                           
  3754                           ;main.c: 76:         RC2 = 1;
  3755  02AD  1283               	bcf	3,5	;RP0=0, select bank0
  3756  02AE  1303               	bcf	3,6	;RP1=0, select bank0
  3757  02AF  1507               	bsf	7,2	;volatile
  3758  02B0                     l1507:
  3759                           
  3760                           ;main.c: 77:         _delay((unsigned long)((1000)*(4000000/4000.0)));
  3761  02B0  3006               	movlw	6
  3762  02B1  00FD               	movwf	??_Alarma+2
  3763  02B2  3013               	movlw	19
  3764  02B3  00FC               	movwf	??_Alarma+1
  3765  02B4  30AD               	movlw	173
  3766  02B5  00FB               	movwf	??_Alarma
  3767  02B6                     u1457:
  3768  02B6  0BFB               	decfsz	??_Alarma,f
  3769  02B7  2AB6               	goto	u1457
  3770  02B8  0BFC               	decfsz	??_Alarma+1,f
  3771  02B9  2AB6               	goto	u1457
  3772  02BA  0BFD               	decfsz	??_Alarma+2,f
  3773  02BB  2AB6               	goto	u1457
  3774  02BC  2ABD               	nop2
  3775  02BD                     l1509:
  3776                           
  3777                           ;main.c: 78:         RC2 = 0;
  3778  02BD  1283               	bcf	3,5	;RP0=0, select bank0
  3779  02BE  1303               	bcf	3,6	;RP1=0, select bank0
  3780  02BF  1107               	bcf	7,2	;volatile
  3781  02C0                     l1511:
  3782                           
  3783                           ;main.c: 79:         _delay((unsigned long)((1000)*(4000000/4000.0)));
  3784  02C0  3006               	movlw	6
  3785  02C1  00FD               	movwf	??_Alarma+2
  3786  02C2  3013               	movlw	19
  3787  02C3  00FC               	movwf	??_Alarma+1
  3788  02C4  30AD               	movlw	173
  3789  02C5  00FB               	movwf	??_Alarma
  3790  02C6                     u1467:
  3791  02C6  0BFB               	decfsz	??_Alarma,f
  3792  02C7  2AC6               	goto	u1467
  3793  02C8  0BFC               	decfsz	??_Alarma+1,f
  3794  02C9  2AC6               	goto	u1467
  3795  02CA  0BFD               	decfsz	??_Alarma+2,f
  3796  02CB  2AC6               	goto	u1467
  3797  02CC  2ACD               	nop2
  3798  02CD                     l1513:
  3799                           
  3800                           ;main.c: 81:     }
  3801  02CD  3001               	movlw	1
  3802  02CE  1283               	bcf	3,5	;RP0=0, select bank0
  3803  02CF  1303               	bcf	3,6	;RP1=0, select bank0
  3804  02D0  07A0               	addwf	Alarma@a,f
  3805  02D1  1803               	skipnc
  3806  02D2  0AA1               	incf	Alarma@a+1,f
  3807  02D3  3000               	movlw	0
  3808  02D4  07A1               	addwf	Alarma@a+1,f
  3809  02D5                     l1515:
  3810  02D5  0821               	movf	Alarma@a+1,w
  3811  02D6  3A80               	xorlw	128
  3812  02D7  00FF               	movwf	btemp+1
  3813  02D8  3080               	movlw	128
  3814  02D9  027F               	subwf	btemp+1,w
  3815  02DA  1D03               	skipz
  3816  02DB  2ADE               	goto	u885
  3817  02DC  3005               	movlw	5
  3818  02DD  0220               	subwf	Alarma@a,w
  3819  02DE                     u885:
  3820  02DE  1C03               	skipc
  3821  02DF  2AE1               	goto	u881
  3822  02E0  2AE2               	goto	u880
  3823  02E1                     u881:
  3824  02E1  2A95               	goto	l1501
  3825  02E2                     u880:
  3826  02E2                     l84:
  3827  02E2  0008               	return
  3828  02E3                     __end_of_Alarma:
  3829                           
  3830                           	psect	text17
  3831  00D1                     __ptext17:	
  3832 ;; *************** function _Lcd_Write_String *****************
  3833 ;; Defined at:
  3834 ;;		line 98 in file "lcd.c"
  3835 ;; Parameters:    Size  Location     Type
  3836 ;;  a               2    5[COMMON] PTR unsigned char 
  3837 ;;		 -> STR_17(17), STR_16(8), STR_15(10), STR_14(15), 
  3838 ;;		 -> STR_12(2), STR_10(2), STR_8(2), STR_6(2), 
  3839 ;;		 -> STR_5(22), STR_4(5), STR_3(16), STR_2(15), 
  3840 ;;		 -> STR_1(5), RAM(512), 
  3841 ;; Auto vars:     Size  Location     Type
  3842 ;;  i               2    7[COMMON] int 
  3843 ;; Return value:  Size  Location     Type
  3844 ;;                  1    wreg      void 
  3845 ;; Registers used:
  3846 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3847 ;; Tracked objects:
  3848 ;;		On entry : 0/0
  3849 ;;		On exit  : 0/0
  3850 ;;		Unchanged: 0/0
  3851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3852 ;;      Params:         2       0       0       0       0
  3853 ;;      Locals:         2       0       0       0       0
  3854 ;;      Temps:          0       0       0       0       0
  3855 ;;      Totals:         4       0       0       0       0
  3856 ;;Total ram usage:        4 bytes
  3857 ;; Hardware stack levels used: 1
  3858 ;; Hardware stack levels required when called: 2
  3859 ;; This function calls:
  3860 ;;		_Lcd_Write_Char
  3861 ;; This function is called by:
  3862 ;;		_ver_clave
  3863 ;;		_Alarma
  3864 ;;		_inicio
  3865 ;;		_main
  3866 ;; This function uses a non-reentrant model
  3867 ;;
  3868                           
  3869  00D1                     _Lcd_Write_String:	
  3870                           ;psect for function _Lcd_Write_String
  3871                           
  3872  00D1                     l1383:	
  3873                           ;incstack = 0
  3874                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3875                           
  3876                           
  3877                           ;lcd.c: 98: void Lcd_Write_String(char *a);lcd.c: 99: {;lcd.c: 100:  int i;;lcd.c: 101: 
      +                           for(i=0;a[i]!='\0';i++)
  3878  00D1  01F7               	clrf	Lcd_Write_String@i
  3879  00D2  01F8               	clrf	Lcd_Write_String@i+1
  3880  00D3  28EC               	goto	l1389
  3881  00D4                     l1385:
  3882                           
  3883                           ;lcd.c: 102:     Lcd_Write_Char(a[i]);
  3884  00D4  0877               	movf	Lcd_Write_String@i,w
  3885  00D5  0775               	addwf	Lcd_Write_String@a,w
  3886  00D6  0084               	movwf	4
  3887  00D7  0878               	movf	Lcd_Write_String@i+1,w
  3888  00D8  1803               	skipnc
  3889  00D9  0A78               	incf	Lcd_Write_String@i+1,w
  3890  00DA  0776               	addwf	Lcd_Write_String@a+1,w
  3891  00DB  00FF               	movwf	btemp+1
  3892  00DC  120A  118A  2003  120A  118A  	fcall	stringtab
  3893  00E1  120A  118A  2101  120A  118A  	fcall	_Lcd_Write_Char
  3894  00E6                     l1387:
  3895  00E6  3001               	movlw	1
  3896  00E7  07F7               	addwf	Lcd_Write_String@i,f
  3897  00E8  1803               	skipnc
  3898  00E9  0AF8               	incf	Lcd_Write_String@i+1,f
  3899  00EA  3000               	movlw	0
  3900  00EB  07F8               	addwf	Lcd_Write_String@i+1,f
  3901  00EC                     l1389:
  3902  00EC  0877               	movf	Lcd_Write_String@i,w
  3903  00ED  0775               	addwf	Lcd_Write_String@a,w
  3904  00EE  0084               	movwf	4
  3905  00EF  0878               	movf	Lcd_Write_String@i+1,w
  3906  00F0  1803               	skipnc
  3907  00F1  0A78               	incf	Lcd_Write_String@i+1,w
  3908  00F2  0776               	addwf	Lcd_Write_String@a+1,w
  3909  00F3  1283               	bcf	3,5	;RP0=0, select bank0
  3910  00F4  1303               	bcf	3,6	;RP1=0, select bank0
  3911  00F5  00FF               	movwf	btemp+1
  3912  00F6  120A  118A  2003  120A  118A  	fcall	stringtab
  3913  00FB  3A00               	xorlw	0
  3914  00FC  1D03               	skipz
  3915  00FD  28FF               	goto	u721
  3916  00FE  2900               	goto	u720
  3917  00FF                     u721:
  3918  00FF  28D4               	goto	l1385
  3919  0100                     u720:
  3920  0100                     l160:
  3921  0100  0008               	return
  3922  0101                     __end_of_Lcd_Write_String:
  3923                           
  3924                           	psect	text18
  3925  0101                     __ptext18:	
  3926 ;; *************** function _Lcd_Write_Char *****************
  3927 ;; Defined at:
  3928 ;;		line 82 in file "lcd.c"
  3929 ;; Parameters:    Size  Location     Type
  3930 ;;  a               1    wreg     unsigned char 
  3931 ;; Auto vars:     Size  Location     Type
  3932 ;;  a               1    4[COMMON] unsigned char 
  3933 ;;  y               1    3[COMMON] unsigned char 
  3934 ;;  temp            1    2[COMMON] unsigned char 
  3935 ;; Return value:  Size  Location     Type
  3936 ;;                  1    wreg      void 
  3937 ;; Registers used:
  3938 ;;		wreg, status,2, status,0, pclath, cstack
  3939 ;; Tracked objects:
  3940 ;;		On entry : 0/0
  3941 ;;		On exit  : 0/0
  3942 ;;		Unchanged: 0/0
  3943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3944 ;;      Params:         0       0       0       0       0
  3945 ;;      Locals:         3       0       0       0       0
  3946 ;;      Temps:          1       0       0       0       0
  3947 ;;      Totals:         4       0       0       0       0
  3948 ;;Total ram usage:        4 bytes
  3949 ;; Hardware stack levels used: 1
  3950 ;; Hardware stack levels required when called: 1
  3951 ;; This function calls:
  3952 ;;		_Lcd_Port
  3953 ;; This function is called by:
  3954 ;;		_Lcd_Write_String
  3955 ;; This function uses a non-reentrant model
  3956 ;;
  3957                           
  3958  0101                     _Lcd_Write_Char:	
  3959                           ;psect for function _Lcd_Write_Char
  3960                           
  3961                           
  3962                           ;incstack = 0
  3963                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  3964                           ;Lcd_Write_Char@a stored from wreg
  3965  0101  00F4               	movwf	Lcd_Write_Char@a
  3966  0102                     l1343:
  3967                           
  3968                           ;lcd.c: 82: void Lcd_Write_Char(char a);lcd.c: 83: {;lcd.c: 84:    char temp,y;;lcd.c: 8
      +                          5:    temp = a&0x0F;
  3969  0102  0874               	movf	Lcd_Write_Char@a,w
  3970  0103  390F               	andlw	15
  3971  0104  00F1               	movwf	??_Lcd_Write_Char
  3972  0105  0871               	movf	??_Lcd_Write_Char,w
  3973  0106  00F2               	movwf	Lcd_Write_Char@temp
  3974                           
  3975                           ;lcd.c: 86:    y = a&0xF0;
  3976  0107  0874               	movf	Lcd_Write_Char@a,w
  3977  0108  39F0               	andlw	240
  3978  0109  00F1               	movwf	??_Lcd_Write_Char
  3979  010A  0871               	movf	??_Lcd_Write_Char,w
  3980  010B  00F3               	movwf	Lcd_Write_Char@y
  3981  010C                     l1345:
  3982                           
  3983                           ;lcd.c: 87:    RD2 = 1;
  3984  010C  1283               	bcf	3,5	;RP0=0, select bank0
  3985  010D  1303               	bcf	3,6	;RP1=0, select bank0
  3986  010E  1508               	bsf	8,2	;volatile
  3987  010F                     l1347:
  3988                           
  3989                           ;lcd.c: 88:    Lcd_Port(y>>4);
  3990  010F  0873               	movf	Lcd_Write_Char@y,w
  3991  0110  00F1               	movwf	??_Lcd_Write_Char
  3992  0111  3004               	movlw	4
  3993  0112                     u675:
  3994  0112  1003               	clrc
  3995  0113  0CF1               	rrf	??_Lcd_Write_Char,f
  3996  0114  3EFF               	addlw	-1
  3997  0115  1D03               	skipz
  3998  0116  2912               	goto	u675
  3999  0117  0871               	movf	??_Lcd_Write_Char,w
  4000  0118  120A  158A  27B9  120A  118A  	fcall	_Lcd_Port
  4001  011D                     l1349:
  4002                           
  4003                           ;lcd.c: 89:    RD3 = 1;
  4004  011D  1283               	bcf	3,5	;RP0=0, select bank0
  4005  011E  1303               	bcf	3,6	;RP1=0, select bank0
  4006  011F  1588               	bsf	8,3	;volatile
  4007  0120                     l1351:
  4008                           
  4009                           ;lcd.c: 90:    _delay((unsigned long)((40)*(4000000/4000000.0)));
  4010  0120  300D               	movlw	13
  4011  0121  00F1               	movwf	??_Lcd_Write_Char
  4012  0122                     u1477:
  4013  0122  0BF1               	decfsz	??_Lcd_Write_Char,f
  4014  0123  2922               	goto	u1477
  4015  0124                     l1353:
  4016                           
  4017                           ;lcd.c: 91:    RD3 = 0;
  4018  0124  1283               	bcf	3,5	;RP0=0, select bank0
  4019  0125  1303               	bcf	3,6	;RP1=0, select bank0
  4020  0126  1188               	bcf	8,3	;volatile
  4021  0127                     l1355:
  4022                           
  4023                           ;lcd.c: 92:    Lcd_Port(temp);
  4024  0127  0872               	movf	Lcd_Write_Char@temp,w
  4025  0128  120A  158A  27B9  120A  118A  	fcall	_Lcd_Port
  4026  012D                     l1357:
  4027                           
  4028                           ;lcd.c: 93:    RD3 = 1;
  4029  012D  1283               	bcf	3,5	;RP0=0, select bank0
  4030  012E  1303               	bcf	3,6	;RP1=0, select bank0
  4031  012F  1588               	bsf	8,3	;volatile
  4032  0130                     l1359:
  4033                           
  4034                           ;lcd.c: 94:    _delay((unsigned long)((40)*(4000000/4000000.0)));
  4035  0130  300D               	movlw	13
  4036  0131  00F1               	movwf	??_Lcd_Write_Char
  4037  0132                     u1487:
  4038  0132  0BF1               	decfsz	??_Lcd_Write_Char,f
  4039  0133  2932               	goto	u1487
  4040  0134                     l1361:
  4041                           
  4042                           ;lcd.c: 95:    RD3 = 0;
  4043  0134  1283               	bcf	3,5	;RP0=0, select bank0
  4044  0135  1303               	bcf	3,6	;RP1=0, select bank0
  4045  0136  1188               	bcf	8,3	;volatile
  4046  0137                     l154:
  4047  0137  0008               	return
  4048  0138                     __end_of_Lcd_Write_Char:
  4049                           
  4050                           	psect	text19
  4051  023F                     __ptext19:	
  4052 ;; *************** function _Lcd_Set_Cursor *****************
  4053 ;; Defined at:
  4054 ;;		line 42 in file "lcd.c"
  4055 ;; Parameters:    Size  Location     Type
  4056 ;;  a               1    wreg     unsigned char 
  4057 ;;  b               1    4[COMMON] unsigned char 
  4058 ;; Auto vars:     Size  Location     Type
  4059 ;;  a               1    7[COMMON] unsigned char 
  4060 ;;  temp            1   10[COMMON] unsigned char 
  4061 ;;  y               1    9[COMMON] unsigned char 
  4062 ;;  z               1    8[COMMON] unsigned char 
  4063 ;; Return value:  Size  Location     Type
  4064 ;;                  1    wreg      void 
  4065 ;; Registers used:
  4066 ;;		wreg, status,2, status,0, pclath, cstack
  4067 ;; Tracked objects:
  4068 ;;		On entry : 0/0
  4069 ;;		On exit  : 0/0
  4070 ;;		Unchanged: 0/0
  4071 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4072 ;;      Params:         1       0       0       0       0
  4073 ;;      Locals:         4       0       0       0       0
  4074 ;;      Temps:          2       0       0       0       0
  4075 ;;      Totals:         7       0       0       0       0
  4076 ;;Total ram usage:        7 bytes
  4077 ;; Hardware stack levels used: 1
  4078 ;; Hardware stack levels required when called: 2
  4079 ;; This function calls:
  4080 ;;		_Lcd_Cmd
  4081 ;; This function is called by:
  4082 ;;		_ver_clave
  4083 ;;		_Alarma
  4084 ;;		_inicio
  4085 ;;		_main
  4086 ;; This function uses a non-reentrant model
  4087 ;;
  4088                           
  4089  023F                     _Lcd_Set_Cursor:	
  4090                           ;psect for function _Lcd_Set_Cursor
  4091                           
  4092                           
  4093                           ;incstack = 0
  4094                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  4095                           ;Lcd_Set_Cursor@a stored from wreg
  4096  023F  00F7               	movwf	Lcd_Set_Cursor@a
  4097  0240                     l1363:
  4098                           
  4099                           ;lcd.c: 42: void Lcd_Set_Cursor(char a, char b);lcd.c: 43: {;lcd.c: 44:  char temp,z,y;;
      +                          lcd.c: 45:  if(a == 1)
  4100  0240  0377               	decf	Lcd_Set_Cursor@a,w
  4101  0241  1D03               	btfss	3,2
  4102  0242  2A44               	goto	u681
  4103  0243  2A45               	goto	u680
  4104  0244                     u681:
  4105  0244  2A68               	goto	l1373
  4106  0245                     u680:
  4107  0245                     l1365:
  4108                           
  4109                           ;lcd.c: 46:  {;lcd.c: 47:    temp = 0x80 + b - 1;
  4110  0245  0874               	movf	Lcd_Set_Cursor@b,w
  4111  0246  3E7F               	addlw	127
  4112  0247  00F5               	movwf	??_Lcd_Set_Cursor
  4113  0248  0875               	movf	??_Lcd_Set_Cursor,w
  4114  0249  00FA               	movwf	Lcd_Set_Cursor@temp
  4115                           
  4116                           ;lcd.c: 48:   z = temp>>4;
  4117  024A  087A               	movf	Lcd_Set_Cursor@temp,w
  4118  024B  00F5               	movwf	??_Lcd_Set_Cursor
  4119  024C  3004               	movlw	4
  4120  024D                     u695:
  4121  024D  1003               	clrc
  4122  024E  0CF5               	rrf	??_Lcd_Set_Cursor,f
  4123  024F  3EFF               	addlw	-1
  4124  0250  1D03               	skipz
  4125  0251  2A4D               	goto	u695
  4126  0252  0875               	movf	??_Lcd_Set_Cursor,w
  4127  0253  00F6               	movwf	??_Lcd_Set_Cursor+1
  4128  0254  0876               	movf	??_Lcd_Set_Cursor+1,w
  4129  0255  00F8               	movwf	Lcd_Set_Cursor@z
  4130  0256                     l1367:
  4131                           
  4132                           ;lcd.c: 49:   y = temp & 0x0F;
  4133  0256  087A               	movf	Lcd_Set_Cursor@temp,w
  4134  0257  390F               	andlw	15
  4135  0258  00F5               	movwf	??_Lcd_Set_Cursor
  4136  0259  0875               	movf	??_Lcd_Set_Cursor,w
  4137  025A  00F9               	movwf	Lcd_Set_Cursor@y
  4138  025B                     l1369:
  4139                           
  4140                           ;lcd.c: 50:   Lcd_Cmd(z);
  4141  025B  0878               	movf	Lcd_Set_Cursor@z,w
  4142  025C  120A  158A  279F  120A  118A  	fcall	_Lcd_Cmd
  4143  0261                     l1371:
  4144                           
  4145                           ;lcd.c: 51:   Lcd_Cmd(y);
  4146  0261  0879               	movf	Lcd_Set_Cursor@y,w
  4147  0262  120A  158A  279F  120A  118A  	fcall	_Lcd_Cmd
  4148                           
  4149                           ;lcd.c: 52:  }
  4150  0267  2A90               	goto	l148
  4151  0268                     l1373:
  4152  0268  3002               	movlw	2
  4153  0269  0677               	xorwf	Lcd_Set_Cursor@a,w
  4154  026A  1D03               	btfss	3,2
  4155  026B  2A6D               	goto	u701
  4156  026C  2A6E               	goto	u700
  4157  026D                     u701:
  4158  026D  2A90               	goto	l148
  4159  026E                     u700:
  4160  026E                     l1375:
  4161                           
  4162                           ;lcd.c: 54:  {;lcd.c: 55:   temp = 0xC0 + b - 1;
  4163  026E  0874               	movf	Lcd_Set_Cursor@b,w
  4164  026F  3EBF               	addlw	191
  4165  0270  00F5               	movwf	??_Lcd_Set_Cursor
  4166  0271  0875               	movf	??_Lcd_Set_Cursor,w
  4167  0272  00FA               	movwf	Lcd_Set_Cursor@temp
  4168                           
  4169                           ;lcd.c: 56:   z = temp>>4;
  4170  0273  087A               	movf	Lcd_Set_Cursor@temp,w
  4171  0274  00F5               	movwf	??_Lcd_Set_Cursor
  4172  0275  3004               	movlw	4
  4173  0276                     u715:
  4174  0276  1003               	clrc
  4175  0277  0CF5               	rrf	??_Lcd_Set_Cursor,f
  4176  0278  3EFF               	addlw	-1
  4177  0279  1D03               	skipz
  4178  027A  2A76               	goto	u715
  4179  027B  0875               	movf	??_Lcd_Set_Cursor,w
  4180  027C  00F6               	movwf	??_Lcd_Set_Cursor+1
  4181  027D  0876               	movf	??_Lcd_Set_Cursor+1,w
  4182  027E  00F8               	movwf	Lcd_Set_Cursor@z
  4183  027F                     l1377:
  4184                           
  4185                           ;lcd.c: 57:   y = temp & 0x0F;
  4186  027F  087A               	movf	Lcd_Set_Cursor@temp,w
  4187  0280  390F               	andlw	15
  4188  0281  00F5               	movwf	??_Lcd_Set_Cursor
  4189  0282  0875               	movf	??_Lcd_Set_Cursor,w
  4190  0283  00F9               	movwf	Lcd_Set_Cursor@y
  4191  0284                     l1379:
  4192                           
  4193                           ;lcd.c: 58:   Lcd_Cmd(z);
  4194  0284  0878               	movf	Lcd_Set_Cursor@z,w
  4195  0285  120A  158A  279F  120A  118A  	fcall	_Lcd_Cmd
  4196  028A                     l1381:
  4197                           
  4198                           ;lcd.c: 59:   Lcd_Cmd(y);
  4199  028A  0879               	movf	Lcd_Set_Cursor@y,w
  4200  028B  120A  158A  279F  120A  118A  	fcall	_Lcd_Cmd
  4201  0290                     l148:
  4202  0290  0008               	return
  4203  0291                     __end_of_Lcd_Set_Cursor:
  4204                           
  4205                           	psect	text20
  4206  0F6C                     __ptext20:	
  4207 ;; *************** function _Lcd_Clear *****************
  4208 ;; Defined at:
  4209 ;;		line 36 in file "lcd.c"
  4210 ;; Parameters:    Size  Location     Type
  4211 ;;		None
  4212 ;; Auto vars:     Size  Location     Type
  4213 ;;		None
  4214 ;; Return value:  Size  Location     Type
  4215 ;;                  1    wreg      void 
  4216 ;; Registers used:
  4217 ;;		wreg, status,2, status,0, pclath, cstack
  4218 ;; Tracked objects:
  4219 ;;		On entry : 0/0
  4220 ;;		On exit  : 0/0
  4221 ;;		Unchanged: 0/0
  4222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4223 ;;      Params:         0       0       0       0       0
  4224 ;;      Locals:         0       0       0       0       0
  4225 ;;      Temps:          0       0       0       0       0
  4226 ;;      Totals:         0       0       0       0       0
  4227 ;;Total ram usage:        0 bytes
  4228 ;; Hardware stack levels used: 1
  4229 ;; Hardware stack levels required when called: 2
  4230 ;; This function calls:
  4231 ;;		_Lcd_Cmd
  4232 ;; This function is called by:
  4233 ;;		_Alarma
  4234 ;;		_inicio
  4235 ;;		_main
  4236 ;; This function uses a non-reentrant model
  4237 ;;
  4238                           
  4239  0F6C                     _Lcd_Clear:	
  4240                           ;psect for function _Lcd_Clear
  4241                           
  4242  0F6C                     l1395:	
  4243                           ;incstack = 0
  4244                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  4245                           
  4246                           
  4247                           ;lcd.c: 38:  Lcd_Cmd(0);
  4248  0F6C  3000               	movlw	0
  4249  0F6D  120A  158A  279F  120A  158A  	fcall	_Lcd_Cmd
  4250                           
  4251                           ;lcd.c: 39:  Lcd_Cmd(1);
  4252  0F72  3001               	movlw	1
  4253  0F73  120A  158A  279F  120A  158A  	fcall	_Lcd_Cmd
  4254  0F78                     l142:
  4255  0F78  0008               	return
  4256  0F79                     __end_of_Lcd_Clear:
  4257                           
  4258                           	psect	text21
  4259  0F9F                     __ptext21:	
  4260 ;; *************** function _Lcd_Cmd *****************
  4261 ;; Defined at:
  4262 ;;		line 27 in file "lcd.c"
  4263 ;; Parameters:    Size  Location     Type
  4264 ;;  a               1    wreg     unsigned char 
  4265 ;; Auto vars:     Size  Location     Type
  4266 ;;  a               1    3[COMMON] unsigned char 
  4267 ;; Return value:  Size  Location     Type
  4268 ;;                  1    wreg      void 
  4269 ;; Registers used:
  4270 ;;		wreg, status,2, status,0, pclath, cstack
  4271 ;; Tracked objects:
  4272 ;;		On entry : 0/0
  4273 ;;		On exit  : 0/0
  4274 ;;		Unchanged: 0/0
  4275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4276 ;;      Params:         0       0       0       0       0
  4277 ;;      Locals:         1       0       0       0       0
  4278 ;;      Temps:          2       0       0       0       0
  4279 ;;      Totals:         3       0       0       0       0
  4280 ;;Total ram usage:        3 bytes
  4281 ;; Hardware stack levels used: 1
  4282 ;; Hardware stack levels required when called: 1
  4283 ;; This function calls:
  4284 ;;		_Lcd_Port
  4285 ;; This function is called by:
  4286 ;;		_Lcd_Clear
  4287 ;;		_Lcd_Set_Cursor
  4288 ;;		_Lcd_Init
  4289 ;;		_Lcd_Shift_Right
  4290 ;;		_Lcd_Shift_Left
  4291 ;; This function uses a non-reentrant model
  4292 ;;
  4293                           
  4294  0F9F                     _Lcd_Cmd:	
  4295                           ;psect for function _Lcd_Cmd
  4296                           
  4297                           
  4298                           ;incstack = 0
  4299                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  4300                           ;Lcd_Cmd@a stored from wreg
  4301  0F9F  00F3               	movwf	Lcd_Cmd@a
  4302  0FA0                     l1333:
  4303                           
  4304                           ;lcd.c: 27: void Lcd_Cmd(char a);lcd.c: 28: {;lcd.c: 29:  RD2 = 0;
  4305  0FA0  1283               	bcf	3,5	;RP0=0, select bank0
  4306  0FA1  1303               	bcf	3,6	;RP1=0, select bank0
  4307  0FA2  1108               	bcf	8,2	;volatile
  4308  0FA3                     l1335:
  4309                           
  4310                           ;lcd.c: 30:  Lcd_Port(a);
  4311  0FA3  0873               	movf	Lcd_Cmd@a,w
  4312  0FA4  120A  158A  27B9  120A  158A  	fcall	_Lcd_Port
  4313  0FA9                     l1337:
  4314                           
  4315                           ;lcd.c: 31:  RD3 = 1;
  4316  0FA9  1283               	bcf	3,5	;RP0=0, select bank0
  4317  0FAA  1303               	bcf	3,6	;RP1=0, select bank0
  4318  0FAB  1588               	bsf	8,3	;volatile
  4319  0FAC                     l1339:
  4320                           
  4321                           ;lcd.c: 32:         _delay((unsigned long)((4)*(4000000/4000.0)));
  4322  0FAC  3006               	movlw	6
  4323  0FAD  00F2               	movwf	??_Lcd_Cmd+1
  4324  0FAE  3030               	movlw	48
  4325  0FAF  00F1               	movwf	??_Lcd_Cmd
  4326  0FB0                     u1497:
  4327  0FB0  0BF1               	decfsz	??_Lcd_Cmd,f
  4328  0FB1  2FB0               	goto	u1497
  4329  0FB2  0BF2               	decfsz	??_Lcd_Cmd+1,f
  4330  0FB3  2FB0               	goto	u1497
  4331  0FB4  0000               	nop
  4332  0FB5                     l1341:
  4333                           
  4334                           ;lcd.c: 33:         RD3 = 0;
  4335  0FB5  1283               	bcf	3,5	;RP0=0, select bank0
  4336  0FB6  1303               	bcf	3,6	;RP1=0, select bank0
  4337  0FB7  1188               	bcf	8,3	;volatile
  4338  0FB8                     l139:
  4339  0FB8  0008               	return
  4340  0FB9                     __end_of_Lcd_Cmd:
  4341                           
  4342                           	psect	text22
  4343  0FB9                     __ptext22:	
  4344 ;; *************** function _Lcd_Port *****************
  4345 ;; Defined at:
  4346 ;;		line 5 in file "lcd.c"
  4347 ;; Parameters:    Size  Location     Type
  4348 ;;  a               1    wreg     unsigned char 
  4349 ;; Auto vars:     Size  Location     Type
  4350 ;;  a               1    0[COMMON] unsigned char 
  4351 ;; Return value:  Size  Location     Type
  4352 ;;                  1    wreg      void 
  4353 ;; Registers used:
  4354 ;;		wreg
  4355 ;; Tracked objects:
  4356 ;;		On entry : 0/0
  4357 ;;		On exit  : 0/0
  4358 ;;		Unchanged: 0/0
  4359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4360 ;;      Params:         0       0       0       0       0
  4361 ;;      Locals:         1       0       0       0       0
  4362 ;;      Temps:          0       0       0       0       0
  4363 ;;      Totals:         1       0       0       0       0
  4364 ;;Total ram usage:        1 bytes
  4365 ;; Hardware stack levels used: 1
  4366 ;; This function calls:
  4367 ;;		Nothing
  4368 ;; This function is called by:
  4369 ;;		_Lcd_Cmd
  4370 ;;		_Lcd_Init
  4371 ;;		_Lcd_Write_Char
  4372 ;; This function uses a non-reentrant model
  4373 ;;
  4374                           
  4375  0FB9                     _Lcd_Port:	
  4376                           ;psect for function _Lcd_Port
  4377                           
  4378                           
  4379                           ;incstack = 0
  4380                           ; Regs used in _Lcd_Port: [wreg]
  4381                           ;Lcd_Port@a stored from wreg
  4382  0FB9  00F0               	movwf	Lcd_Port@a
  4383  0FBA                     l1323:
  4384                           
  4385                           ;lcd.c: 5: void Lcd_Port(char a);lcd.c: 6: {;lcd.c: 7:  if(a & 1)
  4386  0FBA  1C70               	btfss	Lcd_Port@a,0
  4387  0FBB  2FBD               	goto	u631
  4388  0FBC  2FBE               	goto	u630
  4389  0FBD                     u631:
  4390  0FBD  2FC2               	goto	l128
  4391  0FBE                     u630:
  4392  0FBE                     l1325:
  4393                           
  4394                           ;lcd.c: 8:   RD4 = 1;
  4395  0FBE  1283               	bcf	3,5	;RP0=0, select bank0
  4396  0FBF  1303               	bcf	3,6	;RP1=0, select bank0
  4397  0FC0  1608               	bsf	8,4	;volatile
  4398  0FC1  2FC5               	goto	l129
  4399  0FC2                     l128:	
  4400                           ;lcd.c: 9:  else
  4401                           
  4402                           
  4403                           ;lcd.c: 10:   RD4 = 0;
  4404  0FC2  1283               	bcf	3,5	;RP0=0, select bank0
  4405  0FC3  1303               	bcf	3,6	;RP1=0, select bank0
  4406  0FC4  1208               	bcf	8,4	;volatile
  4407  0FC5                     l129:
  4408                           
  4409                           ;lcd.c: 12:  if(a & 2)
  4410  0FC5  1CF0               	btfss	Lcd_Port@a,1
  4411  0FC6  2FC8               	goto	u641
  4412  0FC7  2FC9               	goto	u640
  4413  0FC8                     u641:
  4414  0FC8  2FCB               	goto	l130
  4415  0FC9                     u640:
  4416  0FC9                     l1327:
  4417                           
  4418                           ;lcd.c: 13:   RD5 = 1;
  4419  0FC9  1688               	bsf	8,5	;volatile
  4420  0FCA  2FCC               	goto	l131
  4421  0FCB                     l130:	
  4422                           ;lcd.c: 14:  else
  4423                           
  4424                           
  4425                           ;lcd.c: 15:   RD5 = 0;
  4426  0FCB  1288               	bcf	8,5	;volatile
  4427  0FCC                     l131:
  4428                           
  4429                           ;lcd.c: 17:  if(a & 4)
  4430  0FCC  1D70               	btfss	Lcd_Port@a,2
  4431  0FCD  2FCF               	goto	u651
  4432  0FCE  2FD0               	goto	u650
  4433  0FCF                     u651:
  4434  0FCF  2FD2               	goto	l132
  4435  0FD0                     u650:
  4436  0FD0                     l1329:
  4437                           
  4438                           ;lcd.c: 18:   RD6 = 1;
  4439  0FD0  1708               	bsf	8,6	;volatile
  4440  0FD1  2FD3               	goto	l133
  4441  0FD2                     l132:	
  4442                           ;lcd.c: 19:  else
  4443                           
  4444                           
  4445                           ;lcd.c: 20:   RD6 = 0;
  4446  0FD2  1308               	bcf	8,6	;volatile
  4447  0FD3                     l133:
  4448                           
  4449                           ;lcd.c: 22:  if(a & 8)
  4450  0FD3  1DF0               	btfss	Lcd_Port@a,3
  4451  0FD4  2FD6               	goto	u661
  4452  0FD5  2FD7               	goto	u660
  4453  0FD6                     u661:
  4454  0FD6  2FD9               	goto	l134
  4455  0FD7                     u660:
  4456  0FD7                     l1331:
  4457                           
  4458                           ;lcd.c: 23:   RD7 = 1;
  4459  0FD7  1788               	bsf	8,7	;volatile
  4460  0FD8  2FDA               	goto	l136
  4461  0FD9                     l134:	
  4462                           ;lcd.c: 24:  else
  4463                           
  4464                           
  4465                           ;lcd.c: 25:   RD7 = 0;
  4466  0FD9  1388               	bcf	8,7	;volatile
  4467  0FDA                     l136:
  4468  0FDA  0008               	return
  4469  0FDB                     __end_of_Lcd_Port:
  4470  007E                     btemp	set	126	;btemp
  4471  007E                     wtemp0	set	126
  4472                           
  4473                           	psect	config
  4474                           
  4475                           ;Config register CONFIG1 @ 0x2007
  4476                           ;	Oscillator Selection bits
  4477                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
  4478                           ;	Watchdog Timer Enable bit
  4479                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  4480                           ;	Power-up Timer Enable bit
  4481                           ;	PWRTE = OFF, PWRT disabled
  4482                           ;	RE3/MCLR pin function select bit
  4483                           ;	MCLRE = 0x1, unprogrammed default
  4484                           ;	Code Protection bit
  4485                           ;	CP = OFF, Program memory code protection is disabled
  4486                           ;	Data Code Protection bit
  4487                           ;	CPD = OFF, Data memory code protection is disabled
  4488                           ;	Brown Out Reset Selection bits
  4489                           ;	BOREN = ON, BOR enabled
  4490                           ;	Internal External Switchover bit
  4491                           ;	IESO = 0x1, unprogrammed default
  4492                           ;	Fail-Safe Clock Monitor Enabled bit
  4493                           ;	FCMEN = 0x1, unprogrammed default
  4494                           ;	Low Voltage Programming Enable bit
  4495                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  4496                           ;	In-Circuit Debugger Mode bit
  4497                           ;	DEBUG = 0x1, unprogrammed default
  4498  2007                     	org	8199
  4499  2007  2FF2               	dw	12274
  4500                           
  4501                           ;Config register CONFIG2 @ 0x2008
  4502                           ;	Brown-out Reset Selection bit
  4503                           ;	BOR4V = 0x1, unprogrammed default
  4504                           ;	Flash Program Memory Self Write Enable bits
  4505                           ;	WRT = OFF, Write protection off
  4506  2008                     	org	8200
  4507  2008  3FFF               	dw	16383

Data Sizes:
    Strings     116
    Constant    10
    Data        2
    BSS         18
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     41      61
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_13(CODE[3]), STR_11(CODE[3]), STR_9(CODE[3]), STR_7(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 20
		 -> main@buffer1(BANK0[20]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 512
		 -> STR_17(CODE[17]), STR_16(CODE[8]), STR_15(CODE[10]), STR_14(CODE[15]), 
		 -> STR_12(CODE[2]), STR_10(CODE[2]), STR_8(CODE[2]), STR_6(CODE[2]), 
		 -> STR_5(CODE[22]), STR_4(CODE[5]), STR_3(CODE[16]), STR_2(CODE[15]), 
		 -> STR_1(CODE[5]), RAM(DATA[512]), 


Critical Paths under _main in COMMON

    _main->_Alarma
    _main->_ver_clave
    _ver_clave->_Lcd_Set_Cursor
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _Lcd_Shift_Right->_Lcd_Cmd
    _Lcd_Shift_Left->_Lcd_Cmd
    _inicio->_Lcd_Set_Cursor
    _Lcd_Init->_Lcd_Cmd
    _Alarma->_Lcd_Set_Cursor
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                30    30      0   14871
                                             13 BANK0     28    28      0
                             _Alarma
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                         _Leer_tecla
                             ___wmul
                     _apagar_ledRojo
                   _encender_ledRojo
                  _encender_ledVerde
                             _inicio
                              _mover
                       _pulsar_boton
                            _sprintf
                          _ver_clave
 ---------------------------------------------------------------------------------
 (1) _ver_clave                                            4     4      0    2798
                                             11 COMMON     3     3      0
                                              0 BANK0      1     1      0
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    18      3    1538
                                              0 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     311
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     314
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _pulsar_boton                                         2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _mover                                                7     7      0     312
                                              4 COMMON     7     7      0
                     _Lcd_Shift_Left
                    _Lcd_Shift_Right
 ---------------------------------------------------------------------------------
 (2) _Lcd_Shift_Right                                      0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Shift_Left                                       0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _inicio                                               1     1      0    2886
                                             11 COMMON     1     1      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (1) _encender_ledVerde                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _encender_ledRojo                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _apagar_ledRojo                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4    1004
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Leer_tecla                                           2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Alarma                                               5     5      0    2932
                                             11 COMMON     3     3      0
                                              0 BANK0      2     2      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     4     2      2    1332
                                              5 COMMON     4     2      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       7     6      1    1444
                                              4 COMMON     7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Alarma
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
   _Lcd_Clear
   _Lcd_Init
     _Lcd_Cmd
     _Lcd_Port
   _Lcd_Set_Cursor
   _Lcd_Write_String
   _Leer_tecla
   ___wmul
   _apagar_ledRojo
   _encender_ledRojo
   _encender_ledVerde
   _inicio
     _Lcd_Clear
     _Lcd_Set_Cursor
     _Lcd_Write_String
   _mover
     _Lcd_Shift_Left
       _Lcd_Cmd
     _Lcd_Shift_Right
       _Lcd_Cmd
   _pulsar_boton
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
   _ver_clave
     _Lcd_Set_Cursor
     _Lcd_Write_String

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     29      3D       5       76.2%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      4B      12        0.0%
ABS                  0      0      4B       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Tue Jun 21 13:39:09 2022

                        _x 0049                          pc 0002                         l63 0F63  
                       l72 01AD                         l57 0097                         l66 0F5F  
                       l84 02E2                         l69 0F9E                         l87 00D0  
                       l79 023E                         l96 06EA                         _x1 0059  
                       _x2 0053                         _x3 0051                         _x4 004F  
                       fsr 0004        ___wmul@multiplicand 0072                        l111 07E4  
                      l201 03E1                        l130 0FCB                        l131 0FCC  
                      l132 0FD2                        l133 0FD3                        l134 0FD9  
                      l142 0F78                        l151 033F                        l311 04C9  
                      l136 0FDA                        l128 0FC2                        l160 0100  
                      l129 0FC5                        l154 0137                        l139 0FB8  
                      l315 0FE7                        l163 00A4                        l148 0290  
                      l181 035C                        l317 0FFF                        l182 036D  
                      l166 0F85                        l191 03AA                        l183 0365  
                      l192 03BB                        l193 03B3                        l186 0383  
                      l187 0394                        l196 03D1                        l188 038C  
                      l197 03E0                        l198 03D8                        l587 01F1  
                      l597 0171                        _RC0 0038                        _RC1 0039  
                      _RC2 003A                        _RB4 0034                        _RB5 0035  
                      _RD2 0042                        _RB6 0036                        _RD3 0043  
                      _RD4 0044                        _RD5 0045                        _RD6 0046  
                      _RD7 0047                        u700 026E                        u701 026D  
                      u630 0FBE                        u631 0FBD                        u640 0FC9  
                      u720 0100                        u800 013E                        u641 0FC8  
                      u721 00FF                        u801 013D                        u650 0FD0  
                      u730 01B6                        u651 0FCF                        u715 0276  
                      u731 01B5                        u660 0FD7                        u900 0360  
                      u820 0150                        u661 0FD6                        u901 035F  
                      u821 014F                        u910 0369                        u750 01C8  
                      u830 015A                        u911 0368                        u751 01C7  
                      u831 0159                        u815 0142                        u680 0245  
                      u920 037E                        u681 0244                        u921 037D  
                      u745 01BA                        u930 0387                        u770 01D9  
                      u850 016D                        u675 0112                        u931 0386  
                      u771 01D8                        u851 016C                        u835 0156  
                      u940 0390                        u860 0218                        u941 038F  
                      u861 0217                        u765 01C9                        u845 0161  
                      u950 03A5                        u870 023E                        u790 01ED  
                      u695 024D                        u951 03A4                        u871 023D  
                      u791 01EC                        u775 01D5                        u880 02E2  
                      u960 03AE                        u881 02E1                        u961 03AD  
                      u865 0214                        u785 01E1                        u970 03B7  
                      u890 0357                        u971 03B6                        u891 0356  
                      u875 023A                        u980 03CC                        u885 02DE  
                      u981 03CB                        u990 03D5                        u991 03D4  
                      fsr0 0004                        indf 0000               _pulsar_boton 0F86  
              main@buffer1 0033                       l1401 01B6                       l1331 0FD7  
                     l1323 0FBA                       l1411 01D9                       l1403 01B9  
                     l1325 0FBE                       l1341 0FB5                       l1333 0FA0  
                     l1501 0295                       l1413 01DF                       l1405 01C0  
                     l1327 0FC9                       l1335 0FA3                       l1351 0120  
                     l1343 0102                       l1511 02C0                       l1503 02A4  
                     l1415 01E0                       l1407 01C4                       l1431 014C  
                     l1423 0138                       l1329 0FD0                       l1337 0FA9  
                     l1361 0134                       l1353 0124                       l1345 010C  
                     l1513 02CD                       l1505 02AD                       l1521 00BD  
                     l1417 01E7                       l1409 01C8                       l1433 0150  
                     l1425 013E                       l1441 016D                       l1339 0FAC  
                     l1371 0261                       l1363 0240                       l1355 0127  
                     l1347 010F                       l1515 02D5                       l1507 02B0  
                     l1531 0306                       l1523 02E3                       l1451 0F86  
                     l1419 01ED                       l1435 015A                       l1427 0141  
                     l1611 046C                       l1603 0451                       l1381 028A  
                     l1365 0245                       l1373 0268                       l1357 012D  
                     l1349 011D                       l1509 02BD                       l1525 02E9  
                     l1541 0369                       l1533 0340                       l1445 0094  
                     l1517 00A5                       l1453 0F89                       l1437 0160  
                     l1429 0148                       l1613 0471                       l1605 045B  
                     l1621 04B3                       l1461 018D                       l1701 058C  
                     l1375 026E                       l1367 0256                       l1359 0130  
                     l1383 00D1                       l1527 02F2                       l1551 039F  
                     l1543 0378                       l1535 0351                       l1631 0FDB  
                     l1447 0F60                       l1519 00B4                       l1391 0F79  
                     l1455 0F92                       l1439 0167                       l1615 049F  
                     l1607 0461                       l1623 04C5                       l1463 019A  
                     l1711 05CC                       l1703 05A3                       l1377 027F  
                     l1369 025B                       l1385 00D4                       l1529 0300  
                     l1561 03CC                       l1553 03A5                       l1545 037E  
                     l1537 0357                       l1641 0FFB                       l1633 0FDD  
                     l1449 0F5C                       l1393 0098                       l1481 0218  
                     l1473 01F4                       l1617 04A6                       l1609 0468  
                     l1465 01A4                       l1457 0175                       l1801 07DC  
                     l1721 061F                       l1705 05AD                       l1713 05DB  
                     l1395 0F6C                       l1379 0284                       l1387 00E6  
                     l1563 03D5                       l1555 03AE                       l1547 0387  
                     l1539 0360                       l1635 0FE1                       l1491 022B  
                     l1475 0200                       l1467 01F2                       l1619 04AA  
                     l1571 03EA                       l1459 017F                       l1723 0629  
                     l1715 05E2                       l1731 0657                       l1707 05B6  
                     l1651 04D3                       l1389 00EC                       l1565 03DC  
                     l1557 03B7                       l1549 0390                       l1637 0FEE  
                     l1493 0231                       l1477 0205                       l1397 01AE  
                     l1581 03FD                       l1573 03F0                       l1741 06BC  
                     l1733 065E                       l1725 0632                       l1717 05E7  
                     l1709 05C4                       l1661 04E7                       l1653 04D4  
                     l1645 04CA                       l1495 0291                       l1559 03C6  
                     l1639 0FF5                       l1487 021A                       l1479 020B  
                     l1399 01B0                       l1591 042E                       l1583 041A  
                     l1823 040F                       l1575 03F7                       l1751 06F3  
                     l1743 06C5                       l1735 0663                       l1727 0640  
                     l1719 05ED                       l1671 050D                       l1663 04F0  
                     l1655 04D5                       l1647 04CE                       l1489 0226  
                     l1593 0433                       l1585 0422                       l1577 03FC  
                     l1569 03E5                       l1761 0716                       l1753 06F9  
                     l1745 06D3                       l1737 0669                       l1729 0648  
                     l1681 0534                       l1673 0517                       l1665 04F5  
                     l1657 04DA                       l1649 04D0                       l1587 0426  
                     l1771 0754                       l1763 072C                       l1755 0702  
                     l1747 06DB                       l1739 06B2                       l1691 0564  
                     l1683 0539                       l1675 0520                       l1667 04FA  
                     l1659 04DF                       l1589 042A                       l1773 075D  
                     l1765 0735                       l1781 0787                       l1757 0707  
                     l1693 056C                       l1685 053F                       l1677 0527  
                     l1749 06EA                       l1669 0500                       l1599 0435  
                     l1791 07A5                       l1783 078D                       l1775 0769  
                     l1767 0743                       l1759 0712                       l1687 054D  
                     l1695 057B                       l1679 052E                       l1793 07B3  
                     l1785 078F                       l1777 0772                       l1769 0748  
                     l1697 0581                       l1689 0556                       l1795 07C2  
                     l1787 0794                       l1779 0777                       l1699 0586  
                     l1797 07C8                       l1789 079C                       l1799 07CD  
                     STR_1 0084                       STR_2 0054                       STR_3 0044  
                     STR_4 0089                       STR_5 001D                       STR_6 0087  
                     STR_7 008E                       STR_8 0087                       STR_9 008E  
                     u1000 03DC                       u1001 03DB                       u1010 03F0  
                     u1011 03EF                       u1020 042A                       u1021 0429  
                     u1110 0FFB                       u1030 0450                       u1111 0FFA  
                     u1031 044F                       u1040 045B                       u1200 0702  
                     u1120 0520                       u1105 0FEF                       u1041 045A  
                     u1201 0701                       u1121 051F                       u1050 0461  
                     u1210 0712                       u1130 0527                       u1051 0460  
                     u1035 044C                       u1211 0711                       u1131 0526  
                     u1060 04B3                       u1220 07C2                       u1140 052E  
                     u1061 04B2                       u1221 07C1                       u1141 052D  
                     u1070 04C5                       u1230 07DC                       u1150 0534  
                     u1071 04C4                       u1231 07DB                       u1151 0533  
                     u1080 0FE1                       u1240 07E4                       u1160 0581  
                     u1081 0FE0                       u1241 07E3                       u1225 07BE  
                     u1161 0580                       u1170 05E2                       u1235 07D8  
                     u1307 073D                       u1171 05E1                       u1180 065E  
                     u1317 077F                       u1181 065D                       u1190 06F3  
                     u1407 039A                       u1095 0FE8                       u1327 07AD  
                     u1191 06F2                       u1417 03C1                       u1337 0193  
                     u1257 0513                       u1427 02ED                       u1347 0F8D  
                     u1267 055E                       u1437 02FC                       u1357 0F99  
                     u1277 05BE                       u1447 030A                       u1367 01FA  
                     u1287 063A                       u1457 02B6                       u1377 0220  
                     u1297 06CD                       u1467 02C6                       u1387 034C  
                     u1477 0122                       u1397 0373                       u1487 0132  
                     u1497 0FB0          ?_Lcd_Write_String 0075                       _main 04CA  
                     btemp 007E                       start 0000         ??_Lcd_Write_String 0077  
          __end_of_Lcd_Cmd 0FB9           ver_clave@buffer1 0020   __end_of_encender_ledRojo 0F64  
                    ?_main 0070                      STR_10 0087                      STR_11 008E  
                    STR_12 0087                      STR_13 008E                      STR_14 0063  
                    STR_15 0072                      STR_16 007C                      STR_17 0033  
          __end_of___lwdiv 01F2            __end_of___lwmod 0172                      _PORTB 0006  
                    _PORTC 0007                      _PORTD 0008                      _TRISB 0086  
                    _TRISC 0087                      _TRISD 0088                      _clave 004B  
          __end_of_dpowers 001D                      _mover 01F2                      pclath 000A  
                    status 0003                      wtemp0 007E            __end_of_sprintf 04CA  
               _Leer_tecla 0340           __end_of_Lcd_Init 0340           __end_of_Lcd_Port 0FDB  
          __initialization 07E7               __end_of_main 07E7                     ??_main 002D  
                   ?_mover 0070                  ??_Lcd_Cmd 0071                     _Alarma 0291  
           _apagar_ledRojo 0F5C                     ___wmul 0FDB                  ??___lwdiv 0074  
                ??___lwmod 007C                     _inicio 00A5                     _estado 004D  
                   mover@c 0077                  ??_sprintf 0023            Lcd_Set_Cursor@a 0077  
          Lcd_Set_Cursor@b 0074            Lcd_Set_Cursor@y 0079            Lcd_Set_Cursor@z 0078  
  __end_of__initialization 07FC                ?_Leer_tecla 0070          __end_of_Lcd_Clear 0F79  
   __end_of_apagar_ledRojo 0F60             __pcstackCOMMON 0070               __pidataBANK0 0092  
            __end_of_mover 023F             _Lcd_Set_Cursor 023F             _Lcd_Shift_Left 0F79  
                ?_Lcd_Init 0070                  ?_Lcd_Port 0070                    ??_mover 0074  
               __pbssBANK0 0049                    ?_Alarma 0070            ?_apagar_ledRojo 0070  
               __pmaintext 04CA                    ?___wmul 0070                    ?_inicio 0070  
        ?_encender_ledRojo 0070     __end_of_Lcd_Set_Cursor 0291         ??_encender_ledRojo 0070  
                  Alarma@a 0020     __end_of_Lcd_Shift_Left 0F86          ??_Lcd_Shift_Right 0074  
               ??_Lcd_Init 0074                 ??_Lcd_Port 0070                 __stringtab 0003  
           _Lcd_Write_Char 0101                    _Lcd_Cmd 0F9F                    ___lwdiv 01AE  
                  ___lwmod 0138            ?_Lcd_Set_Cursor 0074                    __ptext1 0172  
                  __ptext2 03E2                    __ptext3 0138                    __ptext4 01AE  
                  __ptext5 0F86                    __ptext6 01F2                    __ptext7 0098  
                  __ptext8 0F79                    __ptext9 00A5                    _dpowers 0013  
          ?_Lcd_Shift_Left 0070                    _sprintf 03E2                    clrloop0 0F65  
   __end_of_Lcd_Write_Char 0138       end_of_initialization 07FC          __end_of_ver_clave 01AE  
                Lcd_Port@a 0070            ?_Lcd_Write_Char 0070          Lcd_Write_String@a 0075  
        Lcd_Write_String@i 0077               ??_Leer_tecla 0070             __end_of_Alarma 02E3  
                _Lcd_Clear 0F6C             __end_of___wmul 1000           _Lcd_Write_String 00D1  
           __end_of_inicio 00D1         __end_of_Leer_tecla 03E2        start_initialization 07E7  
            ?_pulsar_boton 0070           ??_apagar_ledRojo 0070                   ??_Alarma 007B  
               ?_Lcd_Clear 0070            _Lcd_Shift_Right 0098                   ??___wmul 0074  
              __pdataBANK0 005B                   ??_inicio 007B            Lcd_Write_Char@a 0074  
          Lcd_Write_Char@y 0073                  ___latbits 0002             ??_pulsar_boton 0070  
            __pcstackBANK0 0020                   ?_Lcd_Cmd 0070                sprintf@flag 0027  
              sprintf@prec 0028           ___lwdiv@dividend 0072           ??_Lcd_Set_Cursor 0075  
                 ?___lwdiv 0070                   ?___lwmod 0078           ??_Lcd_Shift_Left 0074  
        _encender_ledVerde 0094                  __pstrings 0003         ?_encender_ledVerde 0070  
         ___lwdiv@quotient 0075                   ?_sprintf 0020        ??_encender_ledVerde 0070  
           ___wmul@product 0074    __end_of_Lcd_Shift_Right 00A5                  clear_ram0 0F64  
                 Lcd_Cmd@a 0073                ??_Lcd_Clear 0074                  _ver_clave 0172  
__end_of_encender_ledVerde 0098                  _verificar 0055                __stringbase 0012  
        ___wmul@multiplier 0070           ??_Lcd_Write_Char 0071                  main@tecla 0047  
                 _Lcd_Init 02E3                   _Lcd_Port 0FB9   __end_of_Lcd_Write_String 0101  
     __end_of_pulsar_boton 0F9F                 ?_ver_clave 0070         __end_of__stringtab 0013  
               sprintf@val 0029            ___lwdiv@divisor 0070            ___lwdiv@counter 0077  
                 __ptext10 0094                   __ptext11 0F60                   __ptext20 0F6C  
                 __ptext12 0F5C                   __ptext21 0F9F                   __ptext13 0FDB  
                 __ptext22 0FB9                   __ptext14 0340                   __ptext15 02E3  
                 __ptext16 0291                   __ptext17 00D1                   __ptext18 0101  
                 __ptext19 023F           _encender_ledRojo 0F60                  mover@c_94 0079  
         ?_Lcd_Shift_Right 0070                   _intentos 0057                   _password 005B  
       Lcd_Write_Char@temp 0072                  sprintf@ap 0026                  sprintf@sp 002B  
         ___lwmod@dividend 007A                  stringcode 000D                ??_ver_clave 007B  
       Lcd_Set_Cursor@temp 007A                   sprintf@c 002C                   sprintf@f 0020  
          ___lwmod@divisor 0078            ___lwmod@counter 007D                   stringdir 000D  
                 stringtab 0003  
